openapi: 3.0.0
info:
  title: Adyen Payment API
  description: |-
    A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.

    To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).

    ## Authentication
    To connect to the Payments API, you must use your basic authentication credentials. For this, create your web service user, as described in [How to get the WS user password](https://docs.adyen.com/user-management/how-to-get-the-web-service-ws-user-password). Then use its credentials to authenticate your request, for example:

    ```
    curl
    -U "ws@Company.YourCompany":"YourWsPassword" \
    -H "Content-Type: application/json" \
    ...
    ```
    Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).

    ## Versioning
    Payments 
  termsOfService: https://www.adyen.com/legal/terms-and-conditions
  version: '51'
  contact:
    name: No Contact
    url: http://example.com
    email: email@example.com
  license:
    name: No License
    url: http://example.com
servers:
  - url: https://pal-test.adyen.com/pal/servlet/Payment/v51
paths:
  /adjustAuthorisation:
    post:
      summary: Increases or decreases the authorised amount.
      description: |-
        Allows you to increase or decrease the authorised amount after the initial authorisation has taken place. This functionality enables tipping, improving the chances your authorisation will be valid, charging the shopper when they have already left the merchant premises, etc.

        For more information, refer to [Adjust Authorisation](https://docs.adyen.com/checkout/adjust-authorisation).
      operationId: ''
      parameters: []
  /authorise:
    post:
      summary: Creates a payment authorisation.
      description: |-
        Creates a payment with a unique reference (`pspReference`) and attempts to obtain an authorisation hold. For cards, this amount can be captured or cancelled later. Non-card payment methods typically don't support this and will automatically capture as part of the authorisation.

        For more information, refer to [Classic integration](https://docs.adyen.com/classic-integration).
      operationId: ''
      parameters: []
  /authorise3d:
    post:
      summary: Completes a 3D Secure payment authorisation.
      description: |-
        For an authenticated 3D Secure session, completes the payment authorisation. This endpoint must receive the `md` and `paResponse` parameters that you get from the card issuer after a shopper pays via 3D Secure.

        For more information, refer to [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).
      operationId: ''
      parameters: []
  /authorise3ds2:
    post:
      summary: Completes a 3D Secure 2 payment authorisation.
      description: |-
        For an authenticated 3D Secure 2 session, completes the payment authorisation. This endpoint must receive the `threeDS2Token` and `threeDS2Result` parameters.

        For more information, refer to [3D Secure 2](https://docs.adyen.com/checkout/3d-secure/native-3ds2).
      operationId: ''
      parameters: []
  /cancel:
    post:
      summary: Cancels an authorised payment.
      description: |-
        Cancels the authorisation hold on a payment, returning a unique reference for this request. You can cancel payments after authorisation only for payment methods that support distinct authorisations and captures.

        For more information, refer to [Cancel](https://docs.adyen.com/checkout/cancel).
      operationId: ''
      parameters: []
  /cancelOrRefund:
    post:
      summary: Cancels or refunds a payment.
      description: |-
        Cancels a payment if it has not been captured yet, or refunds it if it has already been captured. This is useful when it is not certain if the payment has been captured or not (for example, when using auto-capture).

        > Do not use this request for payments that involve (multiple) partial captures.

        For more information, refer to [Cancel or refund](https://docs.adyen.com/checkout/cancel-or-refund).
      operationId: ''
      parameters: []
  /capture:
    post:
      summary: Captures an authorised payment.
      description: |-
        Captures the authorisation hold on a payment, returning a unique reference for this request. Usually the full authorisation amount is captured, however it's also possible to capture a smaller amount, which results in cancelling the remaining authorisation balance.

        Payment methods, which automatically capture as part of authorisation, don't need to be captured, but submitting a capture request on these transactions will not result in double charges. If immediate or delayed auto-capture is enable
      operationId: ''
      parameters: []
  /getAuthenticationResult:
    post:
      summary: Return the authentication result after doing a 3D Secure authentication only.
      description: Return the authentication result after doing a 3D Secure authentication only.
      operationId: ''
      parameters: []
  /refund:
    post:
      summary: Refunds a captured payment.
      description: |-
        Refunds a payment that has previously been captured, returning a unique reference for this request. Refunding can be done on the full captured amount or a partial amount. Multiple (partial) refunds will be accepted as long as their sum doesn't exceed the captured amount. Payments which have been authorised, but not captured, cannot be refunded, use the /cancel method instead.

        > Some payment methods/gateways do not support partial/multiple refunds.
        > A margin above the captured limit can be conf
      operationId: ''
      parameters: []
  /retrieve3ds2Result:
    post:
      summary: Retrieves the `threeDS2Result` after doing a 3D Secure 2 authentication only.
      description: Retrieves the `threeDS2Result` after doing a 3D Secure 2 authentication only.
      operationId: ''
      parameters: []
  /technicalCancel:
    post:
      summary: Cancels a payment using your custom reference.
      description: |-
        This endpoint allows you to cancel a payment if you do not have the PSP reference of the original payment request available.

        In your call, refer to the original payment by using the `reference` that you specified in your payment request.

        For more information, see [Technical cancel](https://docs.adyen.com/checkout/cancel#technical-cancel).
      operationId: ''
      parameters: []
  /voidPendingRefund:
    post:
      summary: Cancels a POS refund request before it has been completed.
      description: |-
        This endpoint allows you to cancel the refund request before it has been completed.

        In your call, you can refer to the original refund request either by using the `tenderReference`, or the `pspReference`. We recommend implementing based on the `tenderReference`, as this is generated for both offline and online transactions.

        For more information, refer to [Cancel a refund](https://docs.adyen.com/point-of-sale/refund-payment/cancel-a-pos-refund-request).
      operationId: ''
      parameters: []
components:
  schemas:
    AccountInfo:
      type: object
      description: ''
      properties:
        AccountInfo:
          type: object
          description: ''
          format: null
    accountAgeIndicator:
      type: string
      description: |-
        Indicator for the length of time since this shopper account was created in the merchant's environment.
        Allowed values:
        * notApplicable
        * thisTransaction
        * lessThan30Days
        * from30To60Days
        * moreThan60Days
    accountChangeDate:
      type: string
      description: Date when the shopper's account was last changed.
    accountChangeIndicator:
      type: string
      description: |-
        Indicator for the length of time since the shopper's account was last updated.
        Allowed values:
        * thisTransaction
        * lessThan30Days
        * from30To60Days
        * moreThan60Days
    accountCreationDate:
      type: string
      description: Date when the shopper's account was created.
    accountType:
      type: string
      description: |-
        Indicates the type of account. For example, for a multi-account card product.
        Allowed values:
        * notApplicable
        * credit
        * debit
    addCardAttemptsDay:
      type: integer
      description: Number of attempts the shopper tried to add a card to their account in the last day.
    deliveryAddressUsageDate:
      type: string
      description: Date the selected delivery address was first used.
    deliveryAddressUsageIndicator:
      type: string
      description: |-
        Indicator for the length of time since this delivery address was first used.
        Allowed values:
        * thisTransaction
        * lessThan30Days
        * from30To60Days
        * moreThan60Days
    homePhone:
      type: string
      description: Shopper's home phone number (including the country code).
    mobilePhone:
      type: string
      description: Shopper's mobile phone number (including the country code).
    passwordChangeDate:
      type: string
      description: Date when the shopper last changed their password.
    passwordChangeIndicator:
      type: string
      description: |-
        Indicator when the shopper has changed their password.
        Allowed values:
        * notApplicable
        * thisTransaction
        * lessThan30Days
        * from30To60Days
        * moreThan60Days
    pastTransactionsDay:
      type: integer
      description: Number of all transactions (successful and abandoned) from this shopper in the past 24 hours.
    pastTransactionsYear:
      type: integer
      description: Number of all transactions (successful and abandoned) from this shopper in the past year.
    paymentAccountAge:
      type: string
      description: Date this payment method was added to the shopper's account.
    paymentAccountIndicator:
      type: string
      description: |-
        Indicator for the length of time since this payment method was added to this shopper's account.
        Allowed values:
        * notApplicable
        * thisTransaction
        * lessThan30Days
        * from30To60Days
        * moreThan60Days
    purchasesLast6Months:
      type: integer
      description: Number of successful purchases in the last six months.
    suspiciousActivity:
      type: boolean
      description: Whether suspicious activity was recorded on this account.
    workPhone:
      type: string
      description: Shopper's work phone number (including the country code).
    AdditionalDataCommon:
      type: object
      description: ''
      properties:
        AdditionalDataCommon:
          type: object
          description: ''
          format: null
    authorisationType:
      type: string
      description: |-
        Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/checkout/adjust-authorisation#authorisation-types).

        Allowed values:
        * **PreAuth** – flags the payment request to be handled as a pre-authorisation.
        * **FinalAuth** – flags the payment request to be handled as a final authorisation.
    customRoutingFlag:
      type: string
      description: |-
        Allows you to determine or override the acquirer account that should be used for the transaction.

        If you need to process a payment with an acquirer different from a default one, you can set up a corresponding configuration on the Adyen payments platform. Then you can pass a custom routing flag in a payment request's additional data to target a specific acquirer.

        To enable this functionality, contact [Support](https://support.adyen.com/hc/en-us/requests/new).
    networkTxReference:
      type: string
      description: |-
        Allows you to link the transaction to the original or previous one in a subscription/card-on-file chain. This field is required for token-based transactions where Adyen does not tokenize the card.

        Transaction identifier from card schemes, for example, Mastercard Trace ID or the Visa Transaction ID.

        Submit the original transaction ID of the contract in your payment request if you are not tokenizing card details with Adyen and are making a merchant-initiated transaction (MIT) for subsequent charges.

        Make sure you are sending `shopperInteraction` **ContAuth** and `recurringProcessingModel` **Subscription** or **UnscheduledCardonFile** to ensure that the transaction is classified as MIT.
    overwriteBrand:
      type: string
      description: Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the `selectedBrand` value to specify how to process the transaction.
    RequestedTestErrorResponseCode:
      type: string
      description: |-
        Triggers test scenarios that allow to replicate certain communication errors.

        Allowed values:
        * **NO_CONNECTION_AVAILABLE** – There wasn't a connection available to service the outgoing communication.
        This is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request.
        * **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response.
        This is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response.
    subMerchantID:
      type: string
      description: |-
        This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID, which is used by schemes to identify the merchant.

        A unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator.
        * Format: alpha-numeric.
        * Fixed length: 15 characters.
    AdditionalData3DSecure:
      type: object
      description: ''
      properties:
        AdditionalData3DSecure:
          type: object
          description: ''
          format: null
    allow3DS2:
      type: string
      description: |-
        This parameter indicates that you are able to process 3D Secure 2 transactions natively on your payment page. Send this field when you are using `/payments` endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/checkout/3d-secure/native-3ds2), such as Components or Drop-in. Possible values:
        * **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen still selects the version of 3D Secure based on configuration to optimize authorisation rates and improve the shopper's experience.
        * **false** – Not ready to support native 3D Secure 2 authentication. Adyen will not offer 3D Secure 2 to your shopper regardless of your configuration.
        > This parameter only indicates your readiness to support 3D Secure 2 natively on Drop-in or Components. To specify that you want to perform 3D Secure on a transaction, use Dynamic 3D Secure or send the executeThreeD parameter.
    executeThreeD:
      type: string
      description: |-
        This parameter indicates if you want to perform 3D Secure authentication on a transaction or not. Allowed values:
        * **true** – Perform 3D Secure authentication.
        * **false** – Don't perform 3D Secure authentication.
        > Alternatively, you can also use Dynamic 3D Secure to configure rules for applying 3D Secure.
    mpiImplementationType:
      type: string
      description: In case of Secure+, this field must be set to **CUPSecurePlus**.
    AdditionalDataAirline:
      type: object
      description: ''
      properties:
        AdditionalDataAirline:
          type: object
          description: ''
          format: null
    airline.passenger_name:
      type: string
      description: |-
        Passenger name, initials, and a title.
        * Format: last name + first name or initials + title.
        * Example: *FLYER / MARY MS*.
        * minLength: 1
        * maxLength: 49
    airline.computerized_reservation_system:
      type: string
      description: |-
        The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket.
        * Format: alphanumeric.
        * minLength: 4
        * maxLength: 4
    airline.airline_code:
      type: string
      description: |-
        [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX); numeric. It identifies the carrier.
        * Format: IATA 3-digit accounting code (PAX)
        * Example: KLM = 074
        * minLength: 3
        * maxLength: 3
    airline.ticket_number:
      type: string
      description: |-
        The ticket's unique identifier.
        * minLength: 1
        * maxLength: 150
    airline.flight_date:
      type: string
      description: |-
        Flight departure date. Local time `(HH:mm)` is optional.
        * Date format: `yyyy-MM-dd`
        * Date and time format: `yyyy-MM-dd HH:mm`
        * minLength: 10
        * maxLength: 16
    airline.customer_reference_number:
      type: string
      description: |-
        Reference number; alphanumeric.
        * minLength: 0
        * maxLength: 20
    airline.ticket_issue_address:
      type: string
      description: |-
        Address of the place/agency that issued the ticket.
        * minLength: 0
        * maxLength: 16
    airline.airline_designator_code:
      type: string
      description: |-
        [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX); alphabetical. It identifies the carrier.
        * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter airline code
        * Example: KLM = KL
        * minLength: 2
        * maxLength: 2
    airline.travel_agency_code:
      type: string
      description: |-
        IATA number, also ARC number or ARC/IATA number. Unique identifier number for travel agencies.
        * minLength: 1
        * maxLength: 8
    airline.travel_agency_name:
      type: string
      description: |-
        The name of the travel agency.
        * minLength: 1
        * maxLength: 25
    airline.agency_plan_name:
      type: string
      description: |-
        2-letter agency plan identifier; alphabetical.
        * minLength: 2
        * maxLength: 2
    airline.agency_invoice_number:
      type: string
      description: |-
        Reference number for the invoice, issued by the agency.
        * minLength: 1
        * maxLength: 6
    airline.boarding_fee:
      type: string
      description: |-
        Chargeable amount for boarding the plane.
        The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
        * minLength: 1
        * maxLength: 18
    airline.leg.depart_airport:
      type: string
      description: |-
        Alphabetical identifier of the departure airport.
        This field is required if the airline data includes leg details.
        * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code.
        * Example: Amsterdam = AMS
        * minLength: 3
        * maxLength: 3
    airline.leg.flight_number:
      type: string
      description: |-
        The flight identifier.
        * minLength: 1
        * maxLength: 5
    airline.leg.carrier_code:
      type: string
      description: |-
        [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX); alphabetical. It identifies the carrier.
        This field is required/mandatory if the airline data includes leg details.
        * Format: IATA 2-letter airline code
        * Example: KLM = KL
        * minLength: 2
        * maxLength: 2
    airline.leg.fare_base_code:
      type: string
      description: |-
        [Fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code); alphanumeric.
        * minLength: 1
        * maxLength: 7
    airline.leg.class_of_travel:
      type: string
      description: |-
        1-letter travel class identifier; alphabetical. There is no standard; however, the following codes are used rather consistently:
        * F: first class
        * J: business class
        * Y: economy class
        * W: premium economy

        Limitations:
        * minLength: 1
        * maxLength: 1
    airline.leg.stop_over_code:
      type: string
      description: |-
        1-letter code that indicates whether the passenger is entitled to make a stopover. Only two types of characters are allowed:
        * O: Stopover allowed
        * X: Stopover not allowed

        Limitations:
        * minLength: 1
        * maxLength: 1
    airline.leg.destination_code:
      type: string
      description: |-
        Alphabetical identifier of the destination/arrival airport.
        This field is required/mandatory if the airline data includes leg details.
        * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code.
        * Example: Amsterdam = AMS
        * minLength: 3
        * maxLength: 3
    airline.leg.date_of_travel:
      type: string
      description: "\t\nDate and time of travel. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-compliant.\n* Format: `yyyy-MM-dd HH:mm`\n* minLength: 16\n* maxLength: 16"
    airline.leg.depart_tax:
      type: string
      description: |-
        [Departure tax](https://en.wikipedia.org/wiki/Departure_tax). Amount charged by a country to an individual upon their leaving. The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
        * minLength: 1
        * maxLength: 12
    airline.passenger.first_name:
      type: string
      description: |-
        Passenger first name/given name.
        > This field is required/mandatory if the airline data includes passenger details or leg details.
    airline.passenger.last_name:
      type: string
      description: |-
        Passenger last name/family name.
        > This field is required/mandatory if the airline data includes passenger details or leg details.
    airline.passenger.traveller_type:
      type: string
      description: |-
        Passenger type code (PTC). IATA PTC values are 3-letter alphabetical. Example: ADT, SRC, CNN, INS.

        However, several carriers use non-standard codes that can be up to 5 alphanumeric characters.
        * minLength: 3
        * maxLength: 6
    airline.passenger.telephone_number:
      type: string
      description: |-
        Telephone number of the passenger, including country code. This is an alphanumeric field that can include the '+' and '-' signs.
        * minLength: 3
        * maxLength: 30
    airline.passenger.date_of_birth:
      type: string
      description: |-
        Date of birth of the passenger.

        Date format: `yyyy-MM-dd`
        * minLength: 10
        * maxLength: 10
    AdditionalDataCarRental:
      type: object
      description: ''
      properties:
        AdditionalDataCarRental:
          type: object
          description: ''
          format: null
    carRental.rentalAgreementNumber:
      type: string
      description: |-
        The rental agreement number associated with this car rental.
        * Format: Alphanumeric
        * maxLength: 14
    carRental.renterName:
      type: string
      description: |-
        The name of the person renting the car.
        * Format: Alphanumeric
        * maxLength: 26
    carRental.returnCity:
      type: string
      description: |-
        The city where the car must be returned.
        * Format: Alphanumeric
        * maxLength: 18
    carRental.returnStateProvince:
      type: string
      description: |-
        The state or province where the car must be returned.
        * Format: Alphanumeric
        * maxLength: 3
    carRental.returnCountry:
      type: string
      description: |-
        The country where the car must be returned.
        * Format: Alphanumeric
        * maxLength: 2
    carRental.returnLocationId:
      type: string
      description: |-
        Agency code, phone number, or address abbreviation
        * Format: Alphanumeric
        * maxLength: 10
    carRental.returnDate:
      type: string
      description: |-
        The last date to return the car by.
        * Date format: `yyyyMMdd`
    carRental.checkOutDate:
      type: string
      description: |-
        Pick-up date.
        * Date format: `yyyyMMdd`
    carRental.customerServiceTollFreeNumber:
      type: string
      description: |-
        The customer service phone number of the car rental company.
        * Format: Alphanumeric
        * maxLength: 17
    carRental.rate:
      type: string
      description: |-
        Daily rental rate.
        * Format: Alphanumeric
        * maxLength: 12
    carRental.rateIndicator:
      type: string
      description: |-
        Specifies whether the given rate is applied daily or weekly.
        * D - Daily rate.
        * W - Weekly rate.
    carRental.locationCity:
      type: string
      description: |-
        The location from which the car is rented.
        * Format: Alphanumeric
        * maxLength: 18
    carRental.locationStateProvince:
      type: string
      description: |-
        Pick-up date.
        * Date format: `yyyyMMdd`
    carRental.locationCountry:
      type: string
      description: |-
        The customer service phone number of the car rental company.
        * Format: Alphanumeric
        * maxLength: 17
    carRental.rentalClassId:
      type: string
      description: |-
        Daily rental rate.
        * Format: Alphanumeric
        * maxLength: 12
    carRental.daysRented:
      type: string
      description: |-
        Specifies whether the given rate is applied daily or weekly.
        * D - Daily rate.
        * W - Weekly rate.
    carRental.taxExemptIndicator:
      type: string
      description: |-
        Indicates whether the goods or services were tax-exempt, or tax was not collected.

        Values:
        * 0 - Tax was not collected
        * 1 - Goods or services were tax exempt
    travelEntertainmentAuthData.market:
      type: string
      description: |-
        Indicates what market-specific dataset will be submitted or is being submitted. Value should be "A" for Car rental. This should be included in the auth message.
        * Format: Alphanumeric
        * maxLength: 1
    travelEntertainmentAuthData.duration:
      type: string
      description: |-
        Number of nights.  This should be included in the auth message.
        * Format: Numeric
        * maxLength: 2
    carRental.fuelCharges:
      type: string
      description: |-
        Any fuel charges associated with the rental.
        * Format: Numeric
        * maxLength: 12
    carRental.insuranceCharges:
      type: string
      description: |-
        Any insurance charges associated with the rental.
        * Format: Numeric
        * maxLength: 12
    carRental.noShowIndicator:
      type: string
      description: |-
        Indicates if the customer was a "no-show" (neither keeps nor cancels their booking).
        * 0 - Not applicable.
        * 1 - Customer was a no show.
    carRental.oneWayDropOffCharges:
      type: string
      description: Charge associated with not returning a vehicle to the original rental location.
    AdditionalDataLevel23:
      type: object
      description: ''
      properties:
        AdditionalDataLevel23:
          type: object
          description: ''
          format: null
    enhancedSchemeData.customerReference:
      type: string
      description: |-
        Customer code, if supplied by a customer.
        Encoding: ASCII.
        Max length: 25 characters.
        > Required for Level 2 and Level 3 data.
    enhancedSchemeData.totalTaxAmount:
      type: string
      description: |-
        Total tax amount, in minor units. For example, 2000 means USD 20.00
        * maxLength: 12
    enhancedSchemeData.freightAmount:
      type: number
      description: |-
        Shipping amount, in minor units.

        For example, 2000 means USD 20.00.
        Max length: 12 characters.
    enhancedSchemeData.dutyAmount:
      type: number
      description: |-
        Duty amount, in minor units.

        For example, 2000 means USD 20.00.
        Max length: 12 characters.
    enhancedSchemeData.destinationPostalCode:
      type: string
      description: |-
        The postal code of a destination address.

        Encoding: ASCII.
        Max length: 10 characters.
        > Required for American Express.
    enhancedSchemeData.destinationStateProvinceCode:
      type: string
      description: |-
        Destination state or province code.

        Encoding: ASCII.Max length: 3 characters.
    enhancedSchemeData.shipFromPostalCode:
      type: string
      description: |-
        The postal code of a "ship-from" address.

        Encoding: ASCII.
        Max length: 10 characters.
    enhancedSchemeData.destinationCountryCode:
      type: string
      description: |-
        Destination country code.

        Encoding: ASCII.
        Max length: 3 characters.
    enhancedSchemeData.orderDate:
      type: string
      description: |-
        Order date.
        * Format: `ddMMyy`

        Encoding: ASCII.
        Max length: 6 characters.
    enhancedSchemeData.itemDetailLine[itemNr].commodityCode:
      type: string
      description: |-
        Item commodity code.
        Encoding: ASCII.
        Max length: 12 characters.
    enhancedSchemeData.itemDetailLine[itemNr].description:
      type: string
      description: |-
        Item description.
        Encoding: ASCII.
        Max length: 26 characters.
    enhancedSchemeData.itemDetailLine[itemNr].productCode:
      type: string
      description: |-
        Product code.
        Encoding: ASCII.
        Max length: 12 characters.
    enhancedSchemeData.itemDetailLine[itemNr].quantity:
      type: number
      description: |-
        Quantity, specified as an integer value.
        Value must be greater than 0.
        Max length: 12 characters.
    enhancedSchemeData.itemDetailLine[itemNr].unitOfMeasure:
      type: string
      description: |-
        Item unit of measurement.
        Encoding: ASCII.
        Max length: 3 characters.
    enhancedSchemeData.itemDetailLine[itemNr].unitPrice:
      type: number
      description: |-
        Unit price, specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).
        Max length: 12 characters.
    enhancedSchemeData.itemDetailLine[itemNr].discountAmount:
      type: number
      description: |-
        Discount amount, in minor units.

        For example, 2000 means USD 20.00.
        Max length: 12 characters.
    enhancedSchemeData.itemDetailLine[itemNr].totalAmount:
      type: number
      description: |-
        Total amount, in minor units.
        For example, 2000 means USD 20.00.
        Max length: 12 characters.
    AdditionalDataLodging:
      type: object
      description: ''
      properties:
        AdditionalDataLodging:
          type: object
          description: ''
          format: null
    lodging.customerServiceTollFreeNumber:
      type: string
      description: |-
        The toll free phone number for the hotel/lodgings.
        * Format: Alphanumeric
        * maxLength: 17
    lodging.checkInDate:
      type: string
      description: |-
        The arrival date.
        * Date format: `yyyyMMdd`
    lodging.checkOutDate:
      type: string
      description: |-
        The departure date.
        * Date format: `yyyyMMdd`
    lodging.folioNumber:
      type: string
      description: |-
        Card acceptor’s internal invoice or billing ID reference number.
        * Format: Alphanumeric
        * maxLength: 25
    lodging.propertyPhoneNumber:
      type: string
      description: |-
        Identifies specific lodging property location by its local phone number.
        * Format: Alphanumeric
        * maxLength: 17
    lodging.room1.rate:
      type: string
      description: |-
        The rate of the room.
        * Format: Numeric
        * maxLength: 12
    lodging.room1.tax:
      type: string
      description: |-
        The total amount of tax to be paid.
        * Format: Numeric
        * maxLength: 12
    lodging.room1.numberOfNights:
      type: string
      description: |-
        Total number of nights the room will be rented.
        * Format: Numeric
        * maxLength: 4
    lodging.fireSafetyActIndicator:
      type: string
      description: |-
        Identifies that the facility complies with the Hotel and Motel Fire Safety Act of 1990. Values can be: 'Y' or 'N'.
        * Format: Alphabetic
        * maxLength: 1
    lodging.folioCashAdvances:
      type: string
      description: |-
        The folio cash advances.
        * Format: Numeric
        * maxLength: 12
    lodging.foodBeverageCharges:
      type: string
      description: |-
        Any charges for food and beverages associated with the booking.
        * Format: Numeric
        * maxLength: 12
    lodging.noShowIndicator:
      type: string
      description: |-
        Indicates if the customer was a "no-show" (neither keeps nor cancels their booking).

        Value should be Y or N.
        * Format: Numeric
        * maxLength: 1
    lodging.prepaidExpenses:
      type: string
      description: |-
        Prepaid expenses for the booking.
        * Format: Numeric
        * maxLength: 12
    lodging.totalTax:
      type: string
      description: |-
        Total tax amount.
        * Format: Numeric
        * maxLength: 12
    lodging.totalRoomTax:
      type: string
      description: |-
        Total room tax amount.
        * Format: Numeric
        * maxLength: 12
    AdditionalDataOpenInvoice:
      type: object
      description: ''
      properties:
        AdditionalDataOpenInvoice:
          type: object
          description: ''
          format: null
    openinvoicedata.numberOfLines:
      type: integer
      description: |-
        The number of invoice lines included in `openinvoicedata`.

        There needs to be at least one line, so `numberOfLines` needs to be at least 1.
    openinvoicedata.merchantData:
      type: string
      description: |-
        Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.

        The `merchantData` parameter needs to be added to the `openinvoicedata` signature at the end.

        Since the field is optional, if it's not included it does not impact computing the merchant signature.

        Applies only to Klarna.

        You can contact Klarna for the format and structure of the string.
    openinvoicedata.installmentConfigurationKey:
      type: string
      description: Required for the Klarna account, identifying an installment plan. Include Klarna’s `pclassid` for the installment plan.
    openinvoicedata.line[itemNr].currencyCode:
      type: string
      description: The three-character ISO currency code.
    openinvoicedata.line[itemNr].description:
      type: string
      description: A text description of the product the invoice line refers to.
    openinvoicedata.line[itemNr].itemAmount:
      type: integer
      description: |-
        The price for one item in the invoice line, represented in minor units.

        The due amount for the item, VAT excluded.
    openinvoicedata.line[itemNr].itemVatAmount:
      type: integer
      description: The VAT due for one item in the invoice line, represented in minor units.
    openinvoicedata.line[itemNr].itemVatPercentage:
      type: integer
      description: |-
        The VAT percentage for one item in the invoice line, represented in minor units.

        For example, 19% VAT is specified as 1900.
    openinvoicedata.line[itemNr].itemId:
      type: string
      description: A unique id for this item. Required for RatePay if the description of each item is not unique.
    openinvoicedata.line[itemNr].numberOfItems:
      type: integer
      description: The number of units purchased of a specific product.
    openinvoicedata.line[itemNr].vatCategory:
      type: string
      description: |-
        The country-specific VAT category a product falls under.

        Allowed values:
        * High
        * Low
        * None.
    AdditionalDataRatepay:
      type: object
      description: ''
      properties:
        AdditionalDataRatepay:
          type: object
          description: ''
          format: null
    ratepay.installmentAmount:
      type: integer
      description: Amount the customer has to pay each month.
    ratepay.lastInstallmentAmount:
      type: integer
      description: Amount of the last installment.
    ratepay.interestRate:
      type: integer
      description: Interest rate of this installment. Double
    ratepay.paymentFirstday:
      type: integer
      description: Calendar day of the first payment.
    ratepaydata.invoiceId:
      type: string
      description: Identification name or number for the invoice, defined by the merchant.
    ratepaydata.invoiceDate:
      type: string
      description: Invoice date, defined by the merchant. If not included, the invoice date is set to the delivery date.
    ratepaydata.deliveryDate:
      type: string
      description: Date the merchant delivered the goods to the customer.
    ratepaydata.dueDate:
      type: string
      description: Date by which the customer must settle the payment.
    AdditionalDataRetry:
      type: object
      description: ''
      properties:
        AdditionalDataRetry:
          type: object
          description: ''
          format: null
    retry.chainAttemptNumber:
      type: integer
      description: |-
        The number of times the transaction (not order) has been retried between different payment service providers. For instance, the `chainAttemptNumber` set to 2 means that this transaction has been recently tried on another provider before being sent to Adyen.
        > If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.
    retry.orderAttemptNumber:
      type: integer
      description: |-
        The index of the attempt to bill a particular order, which is identified by the `merchantOrderReference` field. For example, if a recurring transaction fails and is retried one day later, then the order number for these attempts would be 1 and 2, respectively.
        > If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.
    retry.skipRetry:
      type: boolean
      description: |-
        The Boolean value indicating whether Adyen should skip or retry this transaction, if possible.
        > If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.
    AdditionalDataRisk:
      type: object
      description: ''
      properties:
        AdditionalDataRisk:
          type: object
          description: ''
          format: null
    riskdata.deliveryMethod:
      type: string
      description: |-
        The method to deliver the goods to the shopper.

        Used in [Delivery Method](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#delivery-method) check.
    riskdata.accountCreationDate:
      type: string
      description: |-
        The creation date of a shopper account on the merchant's platform.
        * Format: `yyyy-MM-dd HH:mm:ss`
        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules). 
    riskdata.shopperAccountCreationDate:
      type: string
      description: |-
        This specifies the date when the shopper's account was created.
        * Format: `yyyy-MM-dd HH:mm:ss.sssZ`

        Used in [Shopper Account Age check](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#shopper-account-age).
    riskdata.externalRiskScore:
      type: string
      description: |-
        A risk score coming from a system external to Adyen.
        * Format: Numeric (when used in custom risk checks)

        Used in [External Risk Score check](https://docs.adyen.com/risk-management/configure-standard-risk-rules/external-risk-rules#external-risk-score-generic).

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.externalSuspectedFraud:
      type: string
      description: |-
        Usually a boolean representing the fraud risk assessment coming from a system external to Adyen.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.operatorCode:
      type: string
      description: |-
        A code corresponding to a telecom network operator

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.operatorCountry:
      type: object
      description: |-
        Country corresponding to the telecom network operator. Usually a two letter country code.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.operatorName:
      type: string
      description: |-
        Name of a telecom network operator e.g. Vodafone, Orange etc.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.operatorProductCode:
      type: string
      description: |-
        Product code of a telecom product.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.paymentMethod:
      type: string
      description: |-
        Represents the payment method as it is understood by the merchant. Does not necessarily have to coincide with the payment method determined by Adyen.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).

        For visacheckout, masterpass, and paywithgoogle, use `riskdata.paymentDataSource` instead.
    riskdata.paymentDataSource:
      type: string
      description: Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules) for visacheckout, masterpass, and paywithgoogle.
    riskdata.previousSuccessfulOrders:
      type: string
      description: |-
        The number of previous non-fraudulent orders made by a shopper.
        * Format: Numeric

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.referralMethod:
      type: string
      description: |-
        The referral method/reason for joining the merchant's platform.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.referrerUserName:
      type: string
      description: |-
        The user name of a member who referred somebody to the merchant's platform.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.riskProfileId:
      type: string
      description: The id of the risk profile to use instead of the merchant account's currently set risk profile.
    riskdata.secondaryPhoneNumber:
      type: object
      description: |-
        A secondary phone number for a user of the merchant's platform.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.shippingMethod:
      type: string
      description: |-
        Name of the shipping method.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.shopperCountry:
      type: string
      description: |-
        The shopper country as determined by the merchant, usually as a 2 letter country code. Does not have to coincide with the Adyen determined shopper country.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.simDistributor:
      type: string
      description: |-
        Usually a SIM distribution company name e.g. Core, Elite, GK Tel etc.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.userName:
      type: string
      description: |-
        User name of an account on the merchant's platform.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.userStatus:
      type: string
      description: |-
        Usually a user's loyalty status e.g. Gold, Silver etc.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.browserLanguage:
      type: string
      description: |-
        Name of the browser language used by the shopper. Usually a two letter country code (e.g. NL, FR, US etc.)

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.basket.item[itemNr].itemID:
      type: string
      description: ID of the item.
    riskdata.basket.item[itemNr].productTitle:
      type: string
      description: A text description of the product the invoice line refers to.
    riskdata.basket.item[itemNr].amountPerItem:
      type: string
      description: The price of item in the basket, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).
    riskdata.basket.item[itemNr].currency:
      type: string
      description: The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
    riskdata.basket.item[itemNr].upc:
      type: string
      description: '[Universal Product Code](https://en.wikipedia.org/wiki/Universal_Product_Code).'
    riskdata.basket.item[itemNr].sku:
      type: string
      description: '[Stock keeping unit](https://en.wikipedia.org/wiki/Stock_keeping_unit).'
    riskdata.basket.item[itemNr].brand:
      type: string
      description: Brand of the item.
    riskdata.basket.item[itemNr].manufacturer:
      type: string
      description: Manufacturer of the item.
    riskdata.basket.item[itemNr].category:
      type: string
      description: Category of the item.
    riskdata.basket.item[itemNr].color:
      type: string
      description: Color of the item.
    riskdata.basket.item[itemNr].size:
      type: string
      description: Size of the item.
    riskdata.basket.item[itemNr].quantity:
      type: string
      description: Quantity of the item purchased.
    riskdata.basket.item[itemNr].receiverEmail:
      type: string
      description: Email associated with the given product in the basket (usually in electronic gift cards).
    riskdata.promotions.promotion[itemNr].promotionCode:
      type: string
      description: Code of the promotion.
    riskdata.promotions.promotion[itemNr].promotionName:
      type: string
      description: Name of the promotion.
    riskdata.promotions.promotion[itemNr].promotionDiscountAmount:
      type: string
      description: The discount amount of the promotion, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).
    riskdata.promotions.promotion[itemNr].promotionDiscountCurrency:
      type: string
      description: The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
    riskdata.promotions.promotion[itemNr].promotionDiscountPercentage:
      type: string
      description: |-
        Promotion's percentage discount. It is represented in percentage value and there is no need to include the '%' sign.

        e.g. for a promotion discount of 30%, the value of the field should be 30.
    AdditionalDataRiskStandalone:
      type: object
      description: ''
      properties:
        AdditionalDataRiskStandalone:
          type: object
          description: ''
          format: null
    avsResultRaw:
      type: string
      description: 'Raw AVS result received from the acquirer, where available. Example: 7'
    bin:
      type: string
      description: The Bank Identification Number of a credit card, which is the first six digits of a card number. Required for [tokenized card request](/risk-management/standalone-risk#tokenised-pan-request).
    cvcResultRaw:
      type: string
      description: 'Raw CVC result received from the acquirer, where available. Example: 1'
    risk.token:
      type: string
      description: Unique identifier or token for the shopper's card details.
    threeDAuthenticated:
      type: string
      description: 'A Boolean value indicating whether 3DS authentication was completed on this payment. Example: true'
    threeDOffered:
      type: string
      description: 'A Boolean value indicating whether 3DS was offered for this payment. Example: true'
    tokenDataType:
      type: string
      description: 'Required for PayPal payments only. The only supported value is: **paypal**.'
    PayPal.ProtectionEligibility:
      type: string
      description: |-
        Allowed values:
        * **Eligible** — Merchant is protected by PayPal's Seller Protection Policy for Unauthorized Payments and Item Not Received.
        * **PartiallyEligible** — Merchant is protected by PayPal's Seller Protection Policy for Item Not Received.
        * **Ineligible** — Merchant is not protected under the Seller Protection Policy.
    PayPal.PayerId:
      type: string
      description: 'Unique PayPal Customer Account identification number. Character length and limitations: 13 single-byte alphanumeric characters.'
    PayPal.TransactionId:
      type: string
      description: Unique transaction ID of the payment.
    PayPal.CountryCode:
      type: string
      description: Shopper's country of residence in the form of ISO standard 3166 2-character country codes.
    PayPal.FirstName:
      type: string
      description: Shopper's first name.
    PayPal.LastName:
      type: string
      description: Shopper's last name.
    PayPal.Phone:
      type: string
      description: Shopper's phone number.
    PayPal.EmailId:
      type: string
      description: Shopper's email.
    AdditionalDataTemporaryServices:
      type: object
      description: ''
      properties:
        AdditionalDataTemporaryServices:
          type: object
          description: ''
          format: null
    enhancedSchemeData.employeeName:
      type: string
      description: |-
        Name or ID associated with the individual working in a temporary capacity.
        * maxLength: 40
    enhancedSchemeData.jobDescription:
      type: string
      description: |-
        Description of the job or task of the individual working in a temporary capacity.
        * maxLength: 40
    enhancedSchemeData.tempStartDate:
      type: string
      description: |-
        Date for the beginning of the pay period.
        * Format: ddMMyy
        * maxLength: 6
    enhancedSchemeData.tempWeekEnding:
      type: string
      description: |-
        Date of the end of the billing cycle.
        * Format: ddMMyy
        * maxLength: 6
    enhancedSchemeData.requestName:
      type: string
      description: |-
        Name of the individual requesting temporary services.
        * maxLength: 40
    enhancedSchemeData.regularHoursWorked:
      type: string
      description: |-
        Amount of time worked during a normal operation for the task or job.
        * maxLength: 7
    enhancedSchemeData.regularHoursRate:
      type: string
      description: |-
        Amount paid per regular hours worked, minor units.
        * maxLength: 7
    AdditionalDataWallets:
      type: object
      description: ''
      properties:
        AdditionalDataWallets:
          type: object
          description: ''
          format: null
    androidpay.token:
      type: string
      description: The Android Pay token retrieved from the SDK.
    masterpass.transactionId:
      type: string
      description: The Mastercard Masterpass Transaction ID retrieved from the SDK.
    payment.token:
      type: string
      description: The Apple Pay token retrieved from the SDK.
    paywithgoogle.token:
      type: string
      description: The Google Pay token retrieved from the SDK.
    samsungpay.token:
      type: string
      description: The Samsung Pay token retrieved from the SDK.
    visacheckout.callId:
      type: string
      description: The Visa Checkout Call ID retrieved from the SDK.
    Address:
      type: object
      description: ''
      properties:
        Address:
          type: object
          description: ''
          format: null
    city:
      type: string
      description: The name of the city.
    country:
      type: string
      description: |-
        The two-character country code as defined in ISO-3166-1 alpha-2. For example, **US**.
        > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
    houseNumberOrName:
      type: string
      description: The number or name of the house.
    postalCode:
      type: string
      description: A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
    stateOrProvince:
      type: string
      description: |-
        State or province codes as defined in ISO 3166-2. For example, **SF** in US or **ON** for Canada.
        > Required for the US and Canada.
    street:
      type: string
      description: |-
        The name of the street.
        > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
    Amount:
      type: object
      description: ''
      properties:
        Amount:
          type: object
          description: ''
          format: null
    currency:
      type: string
      description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
    value:
      type: integer
      description: |-
        The payable amount that can be charged for the transaction.

        The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
    ApplicationInfo:
      type: object
      description: ''
      properties:
        ApplicationInfo:
          type: object
          description: ''
          format: null
    adyenLibrary:
      type: ''
      description: Adyen-developed software, such as libraries and plugins, used to interact with the Adyen API. For example, Magento plugin, Java API library, etc.
    adyenPaymentSource:
      type: ''
      description: Adyen-developed software to get payment details. For example, Checkout SDK, Secured Fields SDK, etc.
    externalPlatform:
      type: ''
      description: Third-party developed platform used to initiate payment requests. For example, Magento, Zuora, etc.
      properties:
        externalPlatform:
          type: object
          description: Reference
          format: null
    merchantApplication:
      type: ''
      description: Merchant developed software, such as cashier application, used to interact with the Adyen API.
    merchantDevice:
      type: ''
      description: Merchant device information.
      properties:
        merchantDevice:
          type: object
          description: Reference
          format: null
    shopperInteractionDevice:
      type: ''
      description: Shopper interaction device, such as terminal, mobile device or web browser, to initiate payment requests.
      properties:
        shopperInteractionDevice:
          type: object
          description: Reference
          format: null
    AuthenticationResultRequest:
      type: object
      description: ''
      properties:
        AuthenticationResultRequest:
          type: object
          description: ''
          format: null
    merchantAccount:
      type: string
      description: The merchant account identifier, with which the authentication was processed.
    pspReference:
      type: string
      description: The pspReference identifier for the transaction.
    AuthenticationResultResponse:
      type: object
      description: ''
      properties:
        AuthenticationResultResponse:
          type: object
          description: ''
          format: null
    threeDS1Result:
      type: ''
      description: The result of the 3D Secure authentication.
      properties:
        threeDS1Result:
          type: object
          description: Reference
          format: null
    threeDS2Result:
      type: object
      description: Reference
      properties:
        threeDS2Result:
          type: object
          description: Reference
          format: null
    BankAccount:
      type: object
      description: ''
      properties:
        BankAccount:
          type: object
          description: ''
          format: null
    bankAccountNumber:
      type: string
      description: The bank account number (without separators).
    bankCity:
      type: string
      description: The bank city.
    bankLocationId:
      type: string
      description: The location id of the bank. The field value is `nil` in most cases.
    bankName:
      type: string
      description: The name of the bank.
    bic:
      type: string
      description: The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.
    countryCode:
      type: string
      description: |-
        Country code where the bank is located.

        A valid value is an ISO two-character country code (e.g. 'NL').
    iban:
      type: string
      description: The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).
    ownerName:
      type: string
      description: |-
        The name of the bank account holder.
        If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:
        * χ12 is converted to ch12.
        * üA is converted to euA.
        * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.
        After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:
        * John17 - allowed.
        * J17 - allowed.
        * 171 - not allowed.
        * John-7 - allowed.
        > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.
    taxId:
      type: string
      description: The bank account holder's tax ID.
    BrowserInfo:
      type: object
      description: ''
      properties:
        BrowserInfo:
          type: object
          description: ''
          format: null
    acceptHeader:
      type: string
      description: The accept header value of the shopper's browser.
    colorDepth:
      type: integer
      description: 'The color depth of the shopper''s browser in bits per pixel. This should be obtained by using the browser''s `screen.colorDepth` property. Accepted values: 1, 4, 8, 15, 16, 24, 32 or 48 bit color depth.'
    javaEnabled:
      type: boolean
      description: Boolean value indicating if the shopper's browser is able to execute Java.
    javaScriptEnabled:
      type: boolean
      description: Boolean value indicating if the shopper's browser is able to execute JavaScript. A default 'true' value is assumed if the field is not present.
    language:
      type: string
      description: The `navigator.language` value of the shopper's browser (as defined in IETF BCP 47).
    screenHeight:
      type: integer
      description: The total height of the shopper's device screen in pixels.
    screenWidth:
      type: integer
      description: The total width of the shopper's device screen in pixels.
    timeZoneOffset:
      type: integer
      description: Time difference between UTC time and the shopper's browser local time, in minutes.
    userAgent:
      type: string
      description: The user agent value of the shopper's browser.
    Card:
      type: object
      description: ''
      properties:
        Card:
          type: object
          description: ''
          format: null
    cvc:
      type: string
      description: |-
        The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as:
        * CVV2/CVC2 – length: 3 digits
        * CID – length: 4 digits
        > If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server.
        > This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments).
        > When this value is returned in a response, it is always empty because it is not stored.
    expiryMonth:
      type: string
      description: |-
        The card expiry month.
        Format: 2 digits, zero-padded for single digits. For example:
        * 03 = March
        * 11 = November
    expiryYear:
      type: string
      description: |-
        The card expiry year.
        Format: 4 digits. For example: 2020
    holderName:
      type: string
      description: The name of the cardholder, as printed on the card.
    issueNumber:
      type: string
      description: The issue number of the card (for some UK debit cards only).
    number:
      type: string
      description: |-
        The card number (4-19 characters). Do not use any separators.
        When this value is returned in a response, only the last 4 digits of the card number are returned.
    startMonth:
      type: string
      description: The month component of the start date (for some UK debit cards only).
    startYear:
      type: string
      description: The year component of the start date (for some UK debit cards only).
    CommonField:
      type: object
      description: ''
      properties:
        CommonField:
          type: object
          description: ''
          format: null
    name:
      type: string
      description: Name of the field. For example, Name of External Platform.
    version:
      type: string
      description: Version of the field. For example, Version of External Platform.
    DeviceRenderOptions:
      type: object
      description: ''
      properties:
        DeviceRenderOptions:
          type: object
          description: ''
          format: null
    sdkInterface:
      type: string
      description: |-
        Supported SDK interface types.
        Allowed values:
        * Native
        * Html
        * both
    sdkUiType:
      type: array
      description: |-
        UI types supported for displaying specific challenges.
        Allowed values:
        * text
        * singleSelect
        * outOfBand
        * otherHtml
        * multiSelect
    integrator:
      type: string
      description: External platform integrator.
    ForexQuote:
      type: object
      description: ''
      properties:
        ForexQuote:
          type: object
          description: ''
          format: null
    account:
      type: string
      description: The account name.
    baseAmount:
      type: ''
      description: The base amount.
    basePoints:
      type: integer
      description: The base points.
    buy:
      type: ''
      description: The buy rate.
    interbank:
      type: ''
      description: The interbank amount.
    reference:
      type: string
      description: The reference assigned to the forex quote request.
    sell:
      type: ''
      description: The sell rate.
    signature:
      type: string
      description: The signature to validate the integrity.
    source:
      type: string
      description: The source of the forex quote.
    type:
      type: string
      description: The type of forex.
    validTill:
      type: string
      description: The date until which the forex quote is valid.
    FraudCheckResult:
      type: object
      description: ''
      properties:
        FraudCheckResult:
          type: object
          description: ''
          format: null
    accountScore:
      type: integer
      description: The fraud score generated by the risk check.
    checkId:
      type: integer
      description: The ID of the risk check.
    FraudResult:
      type: object
      description: ''
      properties:
        FraudResult:
          type: object
          description: ''
          format: null
    results:
      type: array
      description: The result of the individual risk checks.
    Installments:
      type: object
      description: ''
      properties:
        Installments:
          type: object
          description: ''
          format: null
    os:
      type: string
      description: Operating system running on the merchant device.
    osVersion:
      type: string
      description: Version of the operating system on the merchant device.
    MerchantRiskIndicator:
      type: object
      description: ''
      properties:
        MerchantRiskIndicator:
          type: object
          description: ''
          format: null
    addressMatch:
      type: boolean
      description: Whether the chosen delivery address is identical to the billing address.
    deliveryAddressIndicator:
      type: string
      description: |-
        Indicator regarding the delivery address.
        Allowed values:
        * `shipToBillingAddress`
        * `shipToVerifiedAddress`
        * `shipToNewAddress`
        * `shipToStore`
        * `digitalGoods`
        * `goodsNotShipped`
        * `other`
    deliveryEmail:
      type: string
      description: The delivery email address (for digital goods).
    deliveryTimeframe:
      type: string
      description: |-
        The estimated delivery time for the shopper to receive the goods.
        Allowed values:
        * `electronicDelivery`
        * `sameDayShipping`
        * `overnightShipping`
        * `twoOrMoreDaysShipping`
    giftCardAmount:
      type: ''
      description: The amount of prepaid or gift cards used for this purchase.
    giftCardCount:
      type: integer
      description: Number of individual prepaid or gift cards used for this purchase.
    preOrderDate:
      type: string
      description: For pre-order purchases, the expected date this product will be available to the shopper.
    preOrderPurchase:
      type: boolean
      description: Indicator for whether this transaction is for pre-ordering a product.
    reorderItems:
      type: boolean
      description: Indicator for whether the shopper has already purchased the same items in the past.
    ModificationRequest:
      type: object
      description: ''
      properties:
        ModificationRequest:
          type: object
          description: ''
          format: null
    additionalData:
      type: ''
      description: |-
        This field contains additional data, which may be required for a particular payment request.

        The `additionalData` object consists of entries, each of which includes the key and value.
    modificationAmount:
      type: ''
      description: The amount that needs to be captured/refunded. Required for `/capture` and `/refund`, not allowed for `/cancel`. The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount.
    mpiData:
      type: object
      description: Reference
    originalMerchantReference:
      type: string
      description: The original merchant reference to cancel.
    originalReference:
      type: string
      description: |-
        The original pspReference of the payment to modify.
        This reference is returned in:
        * authorisation response
        * authorisation notification
    splits:
      type: array
      description: The details of how the payment should be split when distributing a payment to a Marketpay Marketplace and its Accounts.
    tenderReference:
      type: string
      description: The transaction reference provided by the PED. For point-of-sale integrations only.
    uniqueTerminalId:
      type: string
      description: Unique terminal ID for the PED that originally processed the request. For point-of-sale integrations only.
    ModificationResult:
      type: object
      description: ''
      properties:
        ModificationResult:
          type: object
          description: ''
          format: null
    response:
      type: string
      description: Indicates if the modification request has been received for processing.
    Name:
      type: object
      description: ''
      properties:
        Name:
          type: object
          description: ''
          format: null
    firstName:
      type: string
      description: The first name.
    gender:
      type: string
      description: |-
        The gender.
        >The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.
    infix:
      type: string
      description: |-
        The name's infix, if applicable.
        >A maximum length of twenty (20) characters is imposed.
    lastName:
      type: string
      description: The last name.
    PaymentRequest:
      type: object
      description: ''
      properties:
        PaymentRequest:
          type: object
          description: ''
          format: null
    accountInfo:
      type: object
      description: Reference
    additionalAmount:
      type: object
      description: Reference
    amount:
      type: object
      description: Reference
    applicationInfo:
      type: object
      description: Reference
    bankAccount:
      type: ''
      description: |-
        The details of the bank account, from which the payment should be made.
        > Either `bankAccount` or `card` field must be provided in a payment request.
    billingAddress:
      type: object
      description: Reference
    browserInfo:
      type: object
      description: Reference
    captureDelayHours:
      type: integer
      description: The delay between the authorisation and scheduled auto-capture, specified in hours.
    card:
      type: ''
      description: |-
        A container for card data.
        > Either `bankAccount` or `card` field must be provided in a payment request.
    dateOfBirth:
      type: string
      description: |-
        The shopper's date of birth.

        Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
    dccQuote:
      type: object
      description: Reference
    deliveryAddress:
      type: object
      description: Reference
    deliveryDate:
      type: string
      description: |-
        The date and time the purchased goods should be delivered.

        Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD

        Example: 2017-07-17T13:42:40.428+01:00
    deviceFingerprint:
      type: string
      description: A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
    enableRealTimeUpdate:
      type: boolean
      description: Choose if a specific transaction should use the Real-time Account Updater, regardless of other settings.
    entityType:
      type: string
      description: The type of the entity the payment is processed for.
    fraudOffset:
      type: integer
      description: An integer value that is added to the normal fraud score. The value can be either positive or negative.
    installments:
      type: object
      description: Reference
    mcc:
      type: string
      description: The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
    merchantOrderReference:
      type: string
      description: |-
        This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.
        The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.
        > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
    merchantRiskIndicator:
      type: object
      description: Reference
    metadata:
      type: object
      description: |-
        Metadata consists of entries, each of which includes a key and a value.
        Limitations: Maximum 20 key-value pairs per request. When exceeding, the "177" error occurs: "Metadata size exceeds limit".
    nationality:
      type: string
      description: The two-character country code of the shopper's nationality.
    orderReference:
      type: string
      description: When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.
    recurring:
      type: object
      description: Reference
      properties:
        recurring:
          type: object
          description: Reference
          format: null
    recurringProcessingModel:
      type: string
      description: |
        Defines a recurring payment type.
        Allowed values:
        * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.
        * `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.
        * `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
    selectedBrand:
      type: string
      description: |-
        Some payment methods require defining a value for this field to specify how to process the transaction.

        For the Bancontact payment method, it can be set to:
        * `maestro` (default), to be processed like a Maestro card, or
        * `bcmc`, to be processed like a Bancontact card.
    selectedRecurringDetailReference:
      type: string
      description: The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
    sessionId:
      type: string
      description: A session ID used to identify a payment session.
    shopperEmail:
      type: string
      description: |-
        The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.
        > For 3D Secure 2 transactions, schemes require the `shopperEmail` for both `deviceChannel` **browser** and **app**.
    shopperIP:
      type: string
      description: |-
        The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).
        > Required for 3D Secure 2 transactions. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
    shopperInteraction:
      type: string
      description: |-
        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
        For the web service API, Adyen assumes Ecommerce shopper interaction by default.

        This field has the following possible values:
        * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
        * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
        * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
        * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
    shopperLocale:
      type: string
      description: The combination of a language code and a country code to specify the language to be used in the payment.
    shopperName:
      type: object
      description: Reference
    shopperReference:
      type: string
      description: |-
        The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).
        > This field is required for recurring payments.
    shopperStatement:
      type: string
      description: The text to appear on the shopper's bank statement.
    socialSecurityNumber:
      type: string
      description: The shopper's social security number.
    store:
      type: string
      description: The physical store, for which this payment is processed.
    telephoneNumber:
      type: string
      description: The shopper's telephone number.
    threeDS2RequestData:
      type: object
      description: Reference
      properties:
        threeDS2RequestData:
          type: object
          description: Reference
          format: null
    threeDSAuthenticationOnly:
      type: boolean
      description: If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only), and not the payment authorisation.
    totalsGroup:
      type: string
      description: The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).
    trustedShopper:
      type: boolean
      description: Set to true if the payment should be routed to a trusted MID.
    PaymentRequest3d:
      type: object
      description: ''
      properties:
        PaymentRequest3d:
          type: object
          description: ''
          format: null
    md:
      type: string
      description: The payment session identifier returned by the card issuer.
    paResponse:
      type: string
      description: Payment authorisation response returned by the card issuer. The `paResponse` field holds the PaRes value received from the card issuer.
    PaymentRequest3ds2:
      type: object
      description: ''
      properties:
        PaymentRequest3ds2:
          type: object
          description: ''
          format: null
    threeDS2Token:
      type: string
      description: The ThreeDS2Token that was returned in the /authorise call.
    PaymentResult:
      type: object
      description: ''
      properties:
        PaymentResult:
          type: object
          description: ''
          format: null
    authCode:
      type: string
      description: |-
        Authorisation code:
        * When the payment is authorised successfully, this field holds the authorisation code for the payment.
        * When the payment is not authorised, this field is empty.
    dccAmount:
      type: ''
      description: |-
        Includes the currency of the conversion and the value of the transaction.
        > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
    dccSignature:
      type: string
      description: |-
        Cryptographic signature used to verify `dccQuote`.
        > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
    fraudResult:
      type: ''
      description: The fraud result properties of the payment.
    issuerUrl:
      type: string
      description: |-
        The URL to direct the shopper to.
        > In case of SecurePlus, do not redirect a shopper to this URL.
    paRequest:
      type: string
      description: |-
        The 3D request data for the issuer.

        If the value is **CUPSecurePlus-CollectSMSVerificationCode**, collect an SMS code from the shopper and pass it in the `/authorise3D` request. For more information, see [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).
    refusalReason:
      type: string
      description: |-
        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error.

        When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.
    resultCode:
      type: string
      description: |-
        The result of the payment. Possible values:

        * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.
        * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.
        * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.
        * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.
        * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.
        * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.
        * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. For more information on handling a pending payment, refer to [Payments with pending status](https://docs.adyen.com/development-resources/payments-with-pending-status).
        * **PresentToShopper** – Indicates that the response contains additional 
    contract:
      type: string
      description: |-
        The type of recurring contract to be used.
        Possible values:
        * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).
        * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).
        * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.
        * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/checkout/online-payouts).
    recurringDetailName:
      type: string
      description: A descriptive name for this detail.
    recurringExpiry:
      type: string
      description: Date after which no further authorisations shall be performed. Only for 3D Secure 2.
    recurringFrequency:
      type: string
      description: Minimum number of days between authorisations. Only for 3D Secure 2.
    tokenService:
      type: string
      description: The name of the token service.
    SDKEphemPubKey:
      type: object
      description: ''
      properties:
        SDKEphemPubKey:
          type: object
          description: ''
          format: null
    crv:
      type: string
      description: The `crv` value as received from the 3D Secure 2 SDK.
    kty:
      type: string
      description: The `kty` value as received from the 3D Secure 2 SDK.
    x:
      type: string
      description: The `x` value as received from the 3D Secure 2 SDK.
    'y':
      type: string
      description: The `y` value as received from the 3D Secure 2 SDK.
    locale:
      type: string
      description: Locale on the shopper interaction device.
    Split:
      type: object
      description: ''
      properties:
        Split:
          type: object
          description: ''
          format: null
    description:
      type: string
      description: A description of this split.
    SplitAmount:
      type: object
      description: ''
      properties:
        SplitAmount:
          type: object
          description: ''
          format: null
    cavv:
      type: string
      description: The cardholder authentication value (base64 encoded).
    cavvAlgorithm:
      type: string
      description: The CAVV algorithm used.
    eci:
      type: string
      description: 3D Secure Electronic Commerce Indicator (ECI).
    threeDAuthenticatedResponse:
      type: string
      description: The authentication response from the ACS.
    threeDOfferedResponse:
      type: string
      description: Whether 3D Secure was offered or not.
    xid:
      type: string
      description: A unique transaction identifier generated by the MPI on behalf of the merchant to identify the 3D Secure transaction, in `Base64` encoding.
    acquirerBIN:
      type: string
      description: Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
    acquirerMerchantID:
      type: string
      description: Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant's acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
    authenticationOnly:
      type: boolean
      description: If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only), and not the payment authorisation.
    challengeIndicator:
      type: string
      description: |
        Possibility to specify a preference for receiving a challenge from the issuer.
        Allowed values:
        * `noPreference`
        * `requestNoChallenge`
        * `requestChallenge`
        * `requestChallengeAsMandate`
    deviceChannel:
      type: string
      description: |-
        The environment of the shopper.
        Allowed values:
        * `app`
        * `browser`
    deviceRenderOptions:
      type: ''
      description: |-
        Display options for the 3D Secure 2 SDK.
        Optional and only for `deviceChannel` **app**.
    merchantName:
      type: string
      description: |-
        Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters.
        > Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/checkout/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.
    messageVersion:
      type: string
      description: The `messageVersion` value indicating the 3D Secure 2 protocol version.
    notificationURL:
      type: string
      description: URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**.
    sdkAppID:
      type: string
      description: |-
        The `sdkAppID` value as received from the 3D Secure 2 SDK.
        Required for `deviceChannel` set to **app**.
    sdkEncData:
      type: string
      description: |-
        The `sdkEncData` value as received from the 3D Secure 2 SDK.
        Required for `deviceChannel` set to **app**.
    sdkEphemPubKey:
      type: ''
      description: |-
        The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK.
        Required for `deviceChannel` set to **app**.
    sdkMaxTimeout:
      type: integer
      description: |-
        The maximum amount of time in minutes for the 3D Secure 2 authentication process.
        Optional and only for `deviceChannel` set to **app**. Defaults to **60** minutes.
    sdkReferenceNumber:
      type: string
      description: |-
        The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK.
        Only for `deviceChannel` set to **app**.
    sdkTransID:
      type: string
      description: |-
        The `sdkTransID` value as received from the 3D Secure 2 SDK.
        Only for `deviceChannel` set to **app**.
    threeDSCompInd:
      type: string
      description: Completion indicator for the device fingerprinting.
    threeDSRequestorID:
      type: string
      description: Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.
    threeDSRequestorName:
      type: string
      description: Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.
    threeDSRequestorURL:
      type: string
      description: URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.
    transactionType:
      type: string
      description: Identify the type of the transaction being authenticated.
    whiteListStatus:
      type: string
      description: The `whiteListStatus` value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.
    authenticationValue:
      type: string
      description: The `authenticationValue` value as defined in the 3D Secure 2 specification.
    dsTransID:
      type: string
      description: The `dsTransID` value as defined in the 3D Secure 2 specification.
    threeDSServerTransID:
      type: string
      description: The `threeDSServerTransID` value as defined in the 3D Secure 2 specification.
    timestamp:
      type: string
      description: The `timestamp` value of the 3D Secure 2 authentication.
    transStatus:
      type: string
      description: The `transStatus` value as defined in the 3D Secure 2 specification.
    transStatusReason:
      type: string
      description: The `transStatusReason` value as defined in the 3D Secure 2 specification.
    ThreeDS2ResultRequest:
      type: object
      description: ''
      properties:
        ThreeDS2ResultRequest:
          type: object
          description: ''
          format: null
    ThreeDS2ResultResponse:
      type: object
      description: ''
      properties:
        ThreeDS2ResultResponse:
          type: object
          description: ''
          format: null
    ThreeDSecureData:
      type: object
      description: ''
      properties:
        ThreeDSecureData:
          type: object
          description: ''
          format: null
    authenticationResponse:
      type: string
      description: |-
        In 3D Secure 1, the authentication response if the shopper was redirected.

        In 3D Secure 2, this is the `transStatus` from the challenge result. If the transaction was frictionless, set this value to **Y**.
    directoryResponse:
      type: string
      description: |-
        In 3D Secure 1, this is the enrollment response from the 3D directory server.

        In 3D Secure 2, this is the `transStatus` from the `ARes`. The possible values are **A** or **Y** for a frictionless flow, or **C** for a challenge flow.
    threeDSVersion:
      type: string
      description: The version of the 3D Secure protocol.
