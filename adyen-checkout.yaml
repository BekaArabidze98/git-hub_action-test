openapi: 3.0.0
info:
  title: Adyen Checkout API
  description: |-
    Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including One-Click and 3D Secure), mobile wallets, and local payment methods (e.g. iDEAL and Sofort).

    This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [Checkout documentation](https://docs.adyen.com/checkout).

    ## Authentication
    Each request to the Checkout API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/user-management/how-to-get-the-api-key). Then set this key to the `X-API-Key` header value, for example:

    ```
    curl
    -H "Content-Type: application/json" \
    -H "X-API-Key: Your_Checkout_API_key" \
    ...
    ```
    Note that when going live, you need to generate a new API Key to access the [live endpoints](https://docs.adyen.com/development-resources/live-end
  termsOfService: https://www.adyen.com/legal/terms-and-conditions
  version: '51'
  contact:
    name: No Contact
    url: http://example.com
    email: email@example.com
  license:
    name: No License
    url: http://example.com
servers:
  - url: https://checkout-test.adyen.com/v51
paths:
  /paymentLinks:
    post:
      summary: Creates a payment link.
      description: |-
        Creates a payment link to our hosted payment form where shoppers can pay. The list of payment methods presented to the shopper depends on the `currency` and `country` parameters sent in the request.

        For more information, refer to [Pay by Link documentation](https://docs.adyen.com/checkout/pay-by-link#create-payment-links-through-api).
      operationId: ''
      parameters: []
  /paymentMethods:
    post:
      summary: Returns available payment methods.
      description: |-
        Queries the available payment methods for a transaction based on the transaction context (like amount, country, and currency). Besides giving back a list of the available payment methods, the response also returns which input details you need to collect from the shopper (to be submitted to `/payments`).

        Although we highly recommend using this endpoint to ensure you are always offering the most up-to-date list of payment methods, its usage is optional. You can, for example, also cache the `/paym
      operationId: ''
      parameters: []
  /paymentSession:
    post:
      summary: Creates a payment session.
      description: |-
        Provides the data object that can be used to start the Checkout SDK. To set up the payment, pass its amount, currency, and other required parameters. We use this to optimise the payment flow and perform better risk assessment of the transaction.

        For more information, refer to [How it works](https://docs.adyen.com/checkout#howitworks).
      operationId: ''
      parameters: []
  /payments:
    post:
      summary: Starts a transaction.
      description: |-
        Sends payment parameters (like amount, country, and currency) together with the input details collected from the shopper. The response returns the result of the payment request:
        * For some payment methods (e.g. Visa, Mastercard, and SEPA Direct Debits) you'll get a final state in the `resultCode` (e.g. `authorised` or `refused`).
        * For other payment methods, you'll receive `redirectShopper` as `resultCode` together with a `redirectUrl`. In this case, the shopper must finalize the payment on the 
      operationId: ''
      parameters: []
  /payments/details:
    post:
      summary: Submits details for a payment.
      description: |-
        Submits details for a payment created using `/payments`. This step is only needed when no final state has been reached on the `/payments` request (for example for 3D Secure, or when getting redirected back directly from a payment method using an app switch).

        The exact details, which need to be sent to this endpoint, are always specified in the response of the associated `/payments` request.

        In addition, the endpoint can be used to verify a `payload`, which is returned after coming back from th
      operationId: ''
      parameters: []
  /payments/result:
    post:
      summary: Verifies payment result.
      description: |-
        Verifies the payment result using the payload returned from the Checkout SDK.

        For more information, refer to [How it works](https://docs.adyen.com/checkout#howitworks).
      operationId: ''
      parameters: []
components:
  schemas:
    AccountInfo:
      type: object
      description: ''
      properties:
        AccountInfo:
          type: object
          description: ''
          format: null
    accountAgeIndicator:
      type: string
      description: |-
        Indicator for the length of time since this shopper account was created in the merchant's environment.
        Allowed values:
        * notApplicable
        * thisTransaction
        * lessThan30Days
        * from30To60Days
        * moreThan60Days
    accountChangeDate:
      type: string
      description: Date when the shopper's account was last changed.
    accountChangeIndicator:
      type: string
      description: |-
        Indicator for the length of time since the shopper's account was last updated.
        Allowed values:
        * thisTransaction
        * lessThan30Days
        * from30To60Days
        * moreThan60Days
    accountCreationDate:
      type: string
      description: Date when the shopper's account was created.
    accountType:
      type: string
      description: |-
        Indicates the type of account. For example, for a multi-account card product.
        Allowed values:
        * notApplicable
        * credit
        * debit
    addCardAttemptsDay:
      type: integer
      description: Number of attempts the shopper tried to add a card to their account in the last day.
    deliveryAddressUsageDate:
      type: string
      description: Date the selected delivery address was first used.
    deliveryAddressUsageIndicator:
      type: string
      description: |-
        Indicator for the length of time since this delivery address was first used.
        Allowed values:
        * thisTransaction
        * lessThan30Days
        * from30To60Days
        * moreThan60Days
    homePhone:
      type: string
      description: Shopper's home phone number (including the country code).
    mobilePhone:
      type: string
      description: Shopper's mobile phone number (including the country code).
    passwordChangeDate:
      type: string
      description: Date when the shopper last changed their password.
    passwordChangeIndicator:
      type: string
      description: |-
        Indicator when the shopper has changed their password.
        Allowed values:
        * notApplicable
        * thisTransaction
        * lessThan30Days
        * from30To60Days
        * moreThan60Days
    pastTransactionsDay:
      type: integer
      description: Number of all transactions (successful and abandoned) from this shopper in the past 24 hours.
    pastTransactionsYear:
      type: integer
      description: Number of all transactions (successful and abandoned) from this shopper in the past year.
    paymentAccountAge:
      type: string
      description: Date this payment method was added to the shopper's account.
    paymentAccountIndicator:
      type: string
      description: |-
        Indicator for the length of time since this payment method was added to this shopper's account.
        Allowed values:
        * notApplicable
        * thisTransaction
        * lessThan30Days
        * from30To60Days
        * moreThan60Days
    purchasesLast6Months:
      type: integer
      description: Number of successful purchases in the last six months.
    suspiciousActivity:
      type: boolean
      description: Whether suspicious activity was recorded on this account.
    workPhone:
      type: string
      description: Shopper's work phone number (including the country code).
    AdditionalDataCommon:
      type: object
      description: ''
      properties:
        AdditionalDataCommon:
          type: object
          description: ''
          format: null
    authorisationType:
      type: string
      description: |-
        Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/checkout/adjust-authorisation#authorisation-types).

        Allowed values:
        * **PreAuth** – flags the payment request to be handled as a pre-authorisation.
        * **FinalAuth** – flags the payment request to be handled as a final authorisation.
    customRoutingFlag:
      type: string
      description: |-
        Allows you to determine or override the acquirer account that should be used for the transaction.

        If you need to process a payment with an acquirer different from a default one, you can set up a corresponding configuration on the Adyen payments platform. Then you can pass a custom routing flag in a payment request's additional data to target a specific acquirer.

        To enable this functionality, contact [Support](https://support.adyen.com/hc/en-us/requests/new).
    networkTxReference:
      type: string
      description: |-
        Allows you to link the transaction to the original or previous one in a subscription/card-on-file chain. This field is required for token-based transactions where Adyen does not tokenize the card.

        Transaction identifier from card schemes, for example, Mastercard Trace ID or the Visa Transaction ID.

        Submit the original transaction ID of the contract in your payment request if you are not tokenizing card details with Adyen and are making a merchant-initiated transaction (MIT) for subsequent charges.

        Make sure you are sending `shopperInteraction` **ContAuth** and `recurringProcessingModel` **Subscription** or **UnscheduledCardonFile** to ensure that the transaction is classified as MIT.
    overwriteBrand:
      type: string
      description: Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the `selectedBrand` value to specify how to process the transaction.
    RequestedTestErrorResponseCode:
      type: string
      description: |-
        Triggers test scenarios that allow to replicate certain communication errors.

        Allowed values:
        * **NO_CONNECTION_AVAILABLE** – There wasn't a connection available to service the outgoing communication.
        This is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request.
        * **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response.
        This is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response.
    subMerchantID:
      type: string
      description: |-
        This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID, which is used by schemes to identify the merchant.

        A unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator.
        * Format: alpha-numeric.
        * Fixed length: 15 characters.
    AdditionalData3DSecure:
      type: object
      description: ''
      properties:
        AdditionalData3DSecure:
          type: object
          description: ''
          format: null
    allow3DS2:
      type: string
      description: |-
        This parameter indicates that you are able to process 3D Secure 2 transactions natively on your payment page. Send this field when you are using `/payments` endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/checkout/3d-secure/native-3ds2), such as Components or Drop-in. Possible values:
        * **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen still selects the version of 3D Secure based on configuration to optimize authorisation rates and improve the shopper's experience.
        * **false** – Not ready to support native 3D Secure 2 authentication. Adyen will not offer 3D Secure 2 to your shopper regardless of your configuration.
        > This parameter only indicates your readiness to support 3D Secure 2 natively on Drop-in or Components. To specify that you want to perform 3D Secure on a transaction, use Dynamic 3D Secure or send the executeThreeD parameter.
    executeThreeD:
      type: string
      description: |-
        This parameter indicates if you want to perform 3D Secure authentication on a transaction or not. Allowed values:
        * **true** – Perform 3D Secure authentication.
        * **false** – Don't perform 3D Secure authentication.
        > Alternatively, you can also use Dynamic 3D Secure to configure rules for applying 3D Secure.
    mpiImplementationType:
      type: string
      description: In case of Secure+, this field must be set to **CUPSecurePlus**.
    AdditionalDataAirline:
      type: object
      description: ''
      properties:
        AdditionalDataAirline:
          type: object
          description: ''
          format: null
    airline.passenger_name:
      type: string
      description: |-
        Passenger name, initials, and a title.
        * Format: last name + first name or initials + title.
        * Example: *FLYER / MARY MS*.
        * minLength: 1
        * maxLength: 49
    airline.computerized_reservation_system:
      type: string
      description: |-
        The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket.
        * Format: alphanumeric.
        * minLength: 4
        * maxLength: 4
    airline.airline_code:
      type: string
      description: |-
        [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX); numeric. It identifies the carrier.
        * Format: IATA 3-digit accounting code (PAX)
        * Example: KLM = 074
        * minLength: 3
        * maxLength: 3
    airline.ticket_number:
      type: string
      description: |-
        The ticket's unique identifier.
        * minLength: 1
        * maxLength: 150
    airline.flight_date:
      type: string
      description: |-
        Flight departure date. Local time `(HH:mm)` is optional.
        * Date format: `yyyy-MM-dd`
        * Date and time format: `yyyy-MM-dd HH:mm`
        * minLength: 10
        * maxLength: 16
    airline.customer_reference_number:
      type: string
      description: |-
        Reference number; alphanumeric.
        * minLength: 0
        * maxLength: 20
    airline.ticket_issue_address:
      type: string
      description: |-
        Address of the place/agency that issued the ticket.
        * minLength: 0
        * maxLength: 16
    airline.airline_designator_code:
      type: string
      description: |-
        [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX); alphabetical. It identifies the carrier.
        * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter airline code
        * Example: KLM = KL
        * minLength: 2
        * maxLength: 2
    airline.travel_agency_code:
      type: string
      description: |-
        IATA number, also ARC number or ARC/IATA number. Unique identifier number for travel agencies.
        * minLength: 1
        * maxLength: 8
    airline.travel_agency_name:
      type: string
      description: |-
        The name of the travel agency.
        * minLength: 1
        * maxLength: 25
    airline.agency_plan_name:
      type: string
      description: |-
        2-letter agency plan identifier; alphabetical.
        * minLength: 2
        * maxLength: 2
    airline.agency_invoice_number:
      type: string
      description: |-
        Reference number for the invoice, issued by the agency.
        * minLength: 1
        * maxLength: 6
    airline.boarding_fee:
      type: string
      description: |-
        Chargeable amount for boarding the plane.
        The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
        * minLength: 1
        * maxLength: 18
    airline.leg.depart_airport:
      type: string
      description: |-
        Alphabetical identifier of the departure airport.
        This field is required if the airline data includes leg details.
        * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code.
        * Example: Amsterdam = AMS
        * minLength: 3
        * maxLength: 3
    airline.leg.flight_number:
      type: string
      description: |-
        The flight identifier.
        * minLength: 1
        * maxLength: 5
    airline.leg.carrier_code:
      type: string
      description: |-
        [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX); alphabetical. It identifies the carrier.
        This field is required/mandatory if the airline data includes leg details.
        * Format: IATA 2-letter airline code
        * Example: KLM = KL
        * minLength: 2
        * maxLength: 2
    airline.leg.fare_base_code:
      type: string
      description: |-
        [Fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code); alphanumeric.
        * minLength: 1
        * maxLength: 7
    airline.leg.class_of_travel:
      type: string
      description: |-
        1-letter travel class identifier; alphabetical. There is no standard; however, the following codes are used rather consistently:
        * F: first class
        * J: business class
        * Y: economy class
        * W: premium economy

        Limitations:
        * minLength: 1
        * maxLength: 1
    airline.leg.stop_over_code:
      type: string
      description: |-
        1-letter code that indicates whether the passenger is entitled to make a stopover. Only two types of characters are allowed:
        * O: Stopover allowed
        * X: Stopover not allowed

        Limitations:
        * minLength: 1
        * maxLength: 1
    airline.leg.destination_code:
      type: string
      description: |-
        Alphabetical identifier of the destination/arrival airport.
        This field is required/mandatory if the airline data includes leg details.
        * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code.
        * Example: Amsterdam = AMS
        * minLength: 3
        * maxLength: 3
    airline.leg.date_of_travel:
      type: string
      description: "\t\nDate and time of travel. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-compliant.\n* Format: `yyyy-MM-dd HH:mm`\n* minLength: 16\n* maxLength: 16"
    airline.leg.depart_tax:
      type: string
      description: |-
        [Departure tax](https://en.wikipedia.org/wiki/Departure_tax). Amount charged by a country to an individual upon their leaving. The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
        * minLength: 1
        * maxLength: 12
    airline.passenger.first_name:
      type: string
      description: |-
        Passenger first name/given name.
        > This field is required/mandatory if the airline data includes passenger details or leg details.
    airline.passenger.last_name:
      type: string
      description: |-
        Passenger last name/family name.
        > This field is required/mandatory if the airline data includes passenger details or leg details.
    airline.passenger.traveller_type:
      type: string
      description: |-
        Passenger type code (PTC). IATA PTC values are 3-letter alphabetical. Example: ADT, SRC, CNN, INS.

        However, several carriers use non-standard codes that can be up to 5 alphanumeric characters.
        * minLength: 3
        * maxLength: 6
    airline.passenger.telephone_number:
      type: string
      description: |-
        Telephone number of the passenger, including country code. This is an alphanumeric field that can include the '+' and '-' signs.
        * minLength: 3
        * maxLength: 30
    airline.passenger.date_of_birth:
      type: string
      description: |-
        Date of birth of the passenger.

        Date format: `yyyy-MM-dd`
        * minLength: 10
        * maxLength: 10
    AdditionalDataCarRental:
      type: object
      description: ''
      properties:
        AdditionalDataCarRental:
          type: object
          description: ''
          format: null
    carRental.rentalAgreementNumber:
      type: string
      description: |-
        The rental agreement number associated with this car rental.
        * Format: Alphanumeric
        * maxLength: 14
    carRental.renterName:
      type: string
      description: |-
        The name of the person renting the car.
        * Format: Alphanumeric
        * maxLength: 26
    carRental.returnCity:
      type: string
      description: |-
        The city where the car must be returned.
        * Format: Alphanumeric
        * maxLength: 18
    carRental.returnStateProvince:
      type: string
      description: |-
        The state or province where the car must be returned.
        * Format: Alphanumeric
        * maxLength: 3
    carRental.returnCountry:
      type: string
      description: |-
        The country where the car must be returned.
        * Format: Alphanumeric
        * maxLength: 2
    carRental.returnLocationId:
      type: string
      description: |-
        Agency code, phone number, or address abbreviation
        * Format: Alphanumeric
        * maxLength: 10
    carRental.returnDate:
      type: string
      description: |-
        The last date to return the car by.
        * Date format: `yyyyMMdd`
    carRental.checkOutDate:
      type: string
      description: |-
        Pick-up date.
        * Date format: `yyyyMMdd`
    carRental.customerServiceTollFreeNumber:
      type: string
      description: |-
        The customer service phone number of the car rental company.
        * Format: Alphanumeric
        * maxLength: 17
    carRental.rate:
      type: string
      description: |-
        Daily rental rate.
        * Format: Alphanumeric
        * maxLength: 12
    carRental.rateIndicator:
      type: string
      description: |-
        Specifies whether the given rate is applied daily or weekly.
        * D - Daily rate.
        * W - Weekly rate.
    carRental.locationCity:
      type: string
      description: |-
        The location from which the car is rented.
        * Format: Alphanumeric
        * maxLength: 18
    carRental.locationStateProvince:
      type: string
      description: |-
        Pick-up date.
        * Date format: `yyyyMMdd`
    carRental.locationCountry:
      type: string
      description: |-
        The customer service phone number of the car rental company.
        * Format: Alphanumeric
        * maxLength: 17
    carRental.rentalClassId:
      type: string
      description: |-
        Daily rental rate.
        * Format: Alphanumeric
        * maxLength: 12
    carRental.daysRented:
      type: string
      description: |-
        Specifies whether the given rate is applied daily or weekly.
        * D - Daily rate.
        * W - Weekly rate.
    carRental.taxExemptIndicator:
      type: string
      description: |-
        Indicates whether the goods or services were tax-exempt, or tax was not collected.

        Values:
        * 0 - Tax was not collected
        * 1 - Goods or services were tax exempt
    travelEntertainmentAuthData.market:
      type: string
      description: |-
        Indicates what market-specific dataset will be submitted or is being submitted. Value should be "A" for Car rental. This should be included in the auth message.
        * Format: Alphanumeric
        * maxLength: 1
    travelEntertainmentAuthData.duration:
      type: string
      description: |-
        Number of nights.  This should be included in the auth message.
        * Format: Numeric
        * maxLength: 2
    carRental.fuelCharges:
      type: string
      description: |-
        Any fuel charges associated with the rental.
        * Format: Numeric
        * maxLength: 12
    carRental.insuranceCharges:
      type: string
      description: |-
        Any insurance charges associated with the rental.
        * Format: Numeric
        * maxLength: 12
    carRental.noShowIndicator:
      type: string
      description: |-
        Indicates if the customer was a "no-show" (neither keeps nor cancels their booking).
        * 0 - Not applicable.
        * 1 - Customer was a no show.
    carRental.oneWayDropOffCharges:
      type: string
      description: Charge associated with not returning a vehicle to the original rental location.
    AdditionalDataLevel23:
      type: object
      description: ''
      properties:
        AdditionalDataLevel23:
          type: object
          description: ''
          format: null
    enhancedSchemeData.customerReference:
      type: string
      description: |-
        Customer code, if supplied by a customer.
        Encoding: ASCII.
        Max length: 25 characters.
        > Required for Level 2 and Level 3 data.
    enhancedSchemeData.totalTaxAmount:
      type: string
      description: |-
        Total tax amount, in minor units. For example, 2000 means USD 20.00
        * maxLength: 12
    enhancedSchemeData.freightAmount:
      type: number
      description: |-
        Shipping amount, in minor units.

        For example, 2000 means USD 20.00.
        Max length: 12 characters.
    enhancedSchemeData.dutyAmount:
      type: number
      description: |-
        Duty amount, in minor units.

        For example, 2000 means USD 20.00.
        Max length: 12 characters.
    enhancedSchemeData.destinationPostalCode:
      type: string
      description: |-
        The postal code of a destination address.

        Encoding: ASCII.
        Max length: 10 characters.
        > Required for American Express.
    enhancedSchemeData.destinationStateProvinceCode:
      type: string
      description: |-
        Destination state or province code.

        Encoding: ASCII.Max length: 3 characters.
    enhancedSchemeData.shipFromPostalCode:
      type: string
      description: |-
        The postal code of a "ship-from" address.

        Encoding: ASCII.
        Max length: 10 characters.
    enhancedSchemeData.destinationCountryCode:
      type: string
      description: |-
        Destination country code.

        Encoding: ASCII.
        Max length: 3 characters.
    enhancedSchemeData.orderDate:
      type: string
      description: |-
        Order date.
        * Format: `ddMMyy`

        Encoding: ASCII.
        Max length: 6 characters.
    enhancedSchemeData.itemDetailLine[itemNr].commodityCode:
      type: string
      description: |-
        Item commodity code.
        Encoding: ASCII.
        Max length: 12 characters.
    enhancedSchemeData.itemDetailLine[itemNr].description:
      type: string
      description: |-
        Item description.
        Encoding: ASCII.
        Max length: 26 characters.
    enhancedSchemeData.itemDetailLine[itemNr].productCode:
      type: string
      description: |-
        Product code.
        Encoding: ASCII.
        Max length: 12 characters.
    enhancedSchemeData.itemDetailLine[itemNr].quantity:
      type: number
      description: |-
        Quantity, specified as an integer value.
        Value must be greater than 0.
        Max length: 12 characters.
    enhancedSchemeData.itemDetailLine[itemNr].unitOfMeasure:
      type: string
      description: |-
        Item unit of measurement.
        Encoding: ASCII.
        Max length: 3 characters.
    enhancedSchemeData.itemDetailLine[itemNr].unitPrice:
      type: number
      description: |-
        Unit price, specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).
        Max length: 12 characters.
    enhancedSchemeData.itemDetailLine[itemNr].discountAmount:
      type: number
      description: |-
        Discount amount, in minor units.

        For example, 2000 means USD 20.00.
        Max length: 12 characters.
    enhancedSchemeData.itemDetailLine[itemNr].totalAmount:
      type: number
      description: |-
        Total amount, in minor units.
        For example, 2000 means USD 20.00.
        Max length: 12 characters.
    AdditionalDataLodging:
      type: object
      description: ''
      properties:
        AdditionalDataLodging:
          type: object
          description: ''
          format: null
    lodging.customerServiceTollFreeNumber:
      type: string
      description: |-
        The toll free phone number for the hotel/lodgings.
        * Format: Alphanumeric
        * maxLength: 17
    lodging.checkInDate:
      type: string
      description: |-
        The arrival date.
        * Date format: `yyyyMMdd`
    lodging.checkOutDate:
      type: string
      description: |-
        The departure date.
        * Date format: `yyyyMMdd`
    lodging.folioNumber:
      type: string
      description: |-
        Card acceptor’s internal invoice or billing ID reference number.
        * Format: Alphanumeric
        * maxLength: 25
    lodging.propertyPhoneNumber:
      type: string
      description: |-
        Identifies specific lodging property location by its local phone number.
        * Format: Alphanumeric
        * maxLength: 17
    lodging.room1.rate:
      type: string
      description: |-
        The rate of the room.
        * Format: Numeric
        * maxLength: 12
    lodging.room1.tax:
      type: string
      description: |-
        The total amount of tax to be paid.
        * Format: Numeric
        * maxLength: 12
    lodging.room1.numberOfNights:
      type: string
      description: |-
        Total number of nights the room will be rented.
        * Format: Numeric
        * maxLength: 4
    lodging.fireSafetyActIndicator:
      type: string
      description: |-
        Identifies that the facility complies with the Hotel and Motel Fire Safety Act of 1990. Values can be: 'Y' or 'N'.
        * Format: Alphabetic
        * maxLength: 1
    lodging.folioCashAdvances:
      type: string
      description: |-
        The folio cash advances.
        * Format: Numeric
        * maxLength: 12
    lodging.foodBeverageCharges:
      type: string
      description: |-
        Any charges for food and beverages associated with the booking.
        * Format: Numeric
        * maxLength: 12
    lodging.noShowIndicator:
      type: string
      description: |-
        Indicates if the customer was a "no-show" (neither keeps nor cancels their booking).

        Value should be Y or N.
        * Format: Numeric
        * maxLength: 1
    lodging.prepaidExpenses:
      type: string
      description: |-
        Prepaid expenses for the booking.
        * Format: Numeric
        * maxLength: 12
    lodging.totalTax:
      type: string
      description: |-
        Total tax amount.
        * Format: Numeric
        * maxLength: 12
    lodging.totalRoomTax:
      type: string
      description: |-
        Total room tax amount.
        * Format: Numeric
        * maxLength: 12
    AdditionalDataOpenInvoice:
      type: object
      description: ''
      properties:
        AdditionalDataOpenInvoice:
          type: object
          description: ''
          format: null
    openinvoicedata.numberOfLines:
      type: integer
      description: |-
        The number of invoice lines included in `openinvoicedata`.

        There needs to be at least one line, so `numberOfLines` needs to be at least 1.
    openinvoicedata.merchantData:
      type: string
      description: |-
        Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.

        The `merchantData` parameter needs to be added to the `openinvoicedata` signature at the end.

        Since the field is optional, if it's not included it does not impact computing the merchant signature.

        Applies only to Klarna.

        You can contact Klarna for the format and structure of the string.
    openinvoicedata.installmentConfigurationKey:
      type: string
      description: Required for the Klarna account, identifying an installment plan. Include Klarna’s `pclassid` for the installment plan.
    openinvoicedata.line[itemNr].currencyCode:
      type: string
      description: The three-character ISO currency code.
    openinvoicedata.line[itemNr].description:
      type: string
      description: A text description of the product the invoice line refers to.
    openinvoicedata.line[itemNr].itemAmount:
      type: integer
      description: |-
        The price for one item in the invoice line, represented in minor units.

        The due amount for the item, VAT excluded.
    openinvoicedata.line[itemNr].itemVatAmount:
      type: integer
      description: The VAT due for one item in the invoice line, represented in minor units.
    openinvoicedata.line[itemNr].itemVatPercentage:
      type: integer
      description: |-
        The VAT percentage for one item in the invoice line, represented in minor units.

        For example, 19% VAT is specified as 1900.
    openinvoicedata.line[itemNr].itemId:
      type: string
      description: A unique id for this item. Required for RatePay if the description of each item is not unique.
    openinvoicedata.line[itemNr].numberOfItems:
      type: integer
      description: The number of units purchased of a specific product.
    openinvoicedata.line[itemNr].vatCategory:
      type: string
      description: |-
        The country-specific VAT category a product falls under.

        Allowed values:
        * High
        * Low
        * None.
    AdditionalDataRatepay:
      type: object
      description: ''
      properties:
        AdditionalDataRatepay:
          type: object
          description: ''
          format: null
    ratepay.installmentAmount:
      type: integer
      description: Amount the customer has to pay each month.
    ratepay.lastInstallmentAmount:
      type: integer
      description: Amount of the last installment.
    ratepay.interestRate:
      type: integer
      description: Interest rate of this installment. Double
    ratepay.paymentFirstday:
      type: integer
      description: Calendar day of the first payment.
    ratepaydata.invoiceId:
      type: string
      description: Identification name or number for the invoice, defined by the merchant.
    ratepaydata.invoiceDate:
      type: string
      description: Invoice date, defined by the merchant. If not included, the invoice date is set to the delivery date.
    ratepaydata.deliveryDate:
      type: string
      description: Date the merchant delivered the goods to the customer.
    ratepaydata.dueDate:
      type: string
      description: Date by which the customer must settle the payment.
    AdditionalDataRetry:
      type: object
      description: ''
      properties:
        AdditionalDataRetry:
          type: object
          description: ''
          format: null
    retry.chainAttemptNumber:
      type: integer
      description: |-
        The number of times the transaction (not order) has been retried between different payment service providers. For instance, the `chainAttemptNumber` set to 2 means that this transaction has been recently tried on another provider before being sent to Adyen.
        > If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.
    retry.orderAttemptNumber:
      type: integer
      description: |-
        The index of the attempt to bill a particular order, which is identified by the `merchantOrderReference` field. For example, if a recurring transaction fails and is retried one day later, then the order number for these attempts would be 1 and 2, respectively.
        > If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.
    retry.skipRetry:
      type: boolean
      description: |-
        The Boolean value indicating whether Adyen should skip or retry this transaction, if possible.
        > If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.
    AdditionalDataRisk:
      type: object
      description: ''
      properties:
        AdditionalDataRisk:
          type: object
          description: ''
          format: null
    riskdata.deliveryMethod:
      type: string
      description: |-
        The method to deliver the goods to the shopper.

        Used in [Delivery Method](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#delivery-method) check.
    riskdata.accountCreationDate:
      type: string
      description: |-
        The creation date of a shopper account on the merchant's platform.
        * Format: `yyyy-MM-dd HH:mm:ss`
        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules). 
    riskdata.shopperAccountCreationDate:
      type: string
      description: |-
        This specifies the date when the shopper's account was created.
        * Format: `yyyy-MM-dd HH:mm:ss.sssZ`

        Used in [Shopper Account Age check](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#shopper-account-age).
    riskdata.externalRiskScore:
      type: string
      description: |-
        A risk score coming from a system external to Adyen.
        * Format: Numeric (when used in custom risk checks)

        Used in [External Risk Score check](https://docs.adyen.com/risk-management/configure-standard-risk-rules/external-risk-rules#external-risk-score-generic).

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.externalSuspectedFraud:
      type: string
      description: |-
        Usually a boolean representing the fraud risk assessment coming from a system external to Adyen.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.operatorCode:
      type: string
      description: |-
        A code corresponding to a telecom network operator

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.operatorCountry:
      type: object
      description: |-
        Country corresponding to the telecom network operator. Usually a two letter country code.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.operatorName:
      type: string
      description: |-
        Name of a telecom network operator e.g. Vodafone, Orange etc.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.operatorProductCode:
      type: string
      description: |-
        Product code of a telecom product.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.paymentMethod:
      type: string
      description: |-
        Represents the payment method as it is understood by the merchant. Does not necessarily have to coincide with the payment method determined by Adyen.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).

        For visacheckout, masterpass, and paywithgoogle, use `riskdata.paymentDataSource` instead.
    riskdata.paymentDataSource:
      type: string
      description: Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules) for visacheckout, masterpass, and paywithgoogle.
    riskdata.previousSuccessfulOrders:
      type: string
      description: |-
        The number of previous non-fraudulent orders made by a shopper.
        * Format: Numeric

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.referralMethod:
      type: string
      description: |-
        The referral method/reason for joining the merchant's platform.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.referrerUserName:
      type: string
      description: |-
        The user name of a member who referred somebody to the merchant's platform.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.riskProfileId:
      type: string
      description: The id of the risk profile to use instead of the merchant account's currently set risk profile.
    riskdata.secondaryPhoneNumber:
      type: object
      description: |-
        A secondary phone number for a user of the merchant's platform.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.shippingMethod:
      type: string
      description: |-
        Name of the shipping method.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.shopperCountry:
      type: string
      description: |-
        The shopper country as determined by the merchant, usually as a 2 letter country code. Does not have to coincide with the Adyen determined shopper country.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.simDistributor:
      type: string
      description: |-
        Usually a SIM distribution company name e.g. Core, Elite, GK Tel etc.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.userName:
      type: string
      description: |-
        User name of an account on the merchant's platform.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.userStatus:
      type: string
      description: |-
        Usually a user's loyalty status e.g. Gold, Silver etc.

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.browserLanguage:
      type: string
      description: |-
        Name of the browser language used by the shopper. Usually a two letter country code (e.g. NL, FR, US etc.)

        Used in [Custom risk checks](https://docs.adyen.com/risk-management/configure-custom-risk-rules).
    riskdata.basket.item[itemNr].itemID:
      type: string
      description: ID of the item.
    riskdata.basket.item[itemNr].productTitle:
      type: string
      description: A text description of the product the invoice line refers to.
    riskdata.basket.item[itemNr].amountPerItem:
      type: string
      description: The price of item in the basket, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).
    riskdata.basket.item[itemNr].currency:
      type: string
      description: The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
    riskdata.basket.item[itemNr].upc:
      type: string
      description: '[Universal Product Code](https://en.wikipedia.org/wiki/Universal_Product_Code).'
    riskdata.basket.item[itemNr].sku:
      type: string
      description: '[Stock keeping unit](https://en.wikipedia.org/wiki/Stock_keeping_unit).'
    riskdata.basket.item[itemNr].brand:
      type: string
      description: Brand of the item.
    riskdata.basket.item[itemNr].manufacturer:
      type: string
      description: Manufacturer of the item.
    riskdata.basket.item[itemNr].category:
      type: string
      description: Category of the item.
    riskdata.basket.item[itemNr].color:
      type: string
      description: Color of the item.
    riskdata.basket.item[itemNr].size:
      type: string
      description: Size of the item.
    riskdata.basket.item[itemNr].quantity:
      type: string
      description: Quantity of the item purchased.
    riskdata.basket.item[itemNr].receiverEmail:
      type: string
      description: Email associated with the given product in the basket (usually in electronic gift cards).
    riskdata.promotions.promotion[itemNr].promotionCode:
      type: string
      description: Code of the promotion.
    riskdata.promotions.promotion[itemNr].promotionName:
      type: string
      description: Name of the promotion.
    riskdata.promotions.promotion[itemNr].promotionDiscountAmount:
      type: string
      description: The discount amount of the promotion, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).
    riskdata.promotions.promotion[itemNr].promotionDiscountCurrency:
      type: string
      description: The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
    riskdata.promotions.promotion[itemNr].promotionDiscountPercentage:
      type: string
      description: |-
        Promotion's percentage discount. It is represented in percentage value and there is no need to include the '%' sign.

        e.g. for a promotion discount of 30%, the value of the field should be 30.
    AdditionalDataRiskStandalone:
      type: object
      description: ''
      properties:
        AdditionalDataRiskStandalone:
          type: object
          description: ''
          format: null
    avsResultRaw:
      type: string
      description: 'Raw AVS result received from the acquirer, where available. Example: 7'
    bin:
      type: string
      description: The Bank Identification Number of a credit card, which is the first six digits of a card number. Required for [tokenized card request](/risk-management/standalone-risk#tokenised-pan-request).
    cvcResultRaw:
      type: string
      description: 'Raw CVC result received from the acquirer, where available. Example: 1'
    risk.token:
      type: string
      description: Unique identifier or token for the shopper's card details.
    threeDAuthenticated:
      type: string
      description: 'A Boolean value indicating whether 3DS authentication was completed on this payment. Example: true'
    threeDOffered:
      type: string
      description: 'A Boolean value indicating whether 3DS was offered for this payment. Example: true'
    tokenDataType:
      type: string
      description: 'Required for PayPal payments only. The only supported value is: **paypal**.'
    PayPal.ProtectionEligibility:
      type: string
      description: |-
        Allowed values:
        * **Eligible** — Merchant is protected by PayPal's Seller Protection Policy for Unauthorized Payments and Item Not Received.
        * **PartiallyEligible** — Merchant is protected by PayPal's Seller Protection Policy for Item Not Received.
        * **Ineligible** — Merchant is not protected under the Seller Protection Policy.
    PayPal.PayerId:
      type: string
      description: 'Unique PayPal Customer Account identification number. Character length and limitations: 13 single-byte alphanumeric characters.'
    PayPal.TransactionId:
      type: string
      description: Unique transaction ID of the payment.
    PayPal.CountryCode:
      type: string
      description: Shopper's country of residence in the form of ISO standard 3166 2-character country codes.
    PayPal.FirstName:
      type: string
      description: Shopper's first name.
    PayPal.LastName:
      type: string
      description: Shopper's last name.
    PayPal.Phone:
      type: string
      description: Shopper's phone number.
    PayPal.EmailId:
      type: string
      description: Shopper's email.
    AdditionalDataTemporaryServices:
      type: object
      description: ''
      properties:
        AdditionalDataTemporaryServices:
          type: object
          description: ''
          format: null
    enhancedSchemeData.employeeName:
      type: string
      description: |-
        Name or ID associated with the individual working in a temporary capacity.
        * maxLength: 40
    enhancedSchemeData.jobDescription:
      type: string
      description: |-
        Description of the job or task of the individual working in a temporary capacity.
        * maxLength: 40
    enhancedSchemeData.tempStartDate:
      type: string
      description: |-
        Date for the beginning of the pay period.
        * Format: ddMMyy
        * maxLength: 6
    enhancedSchemeData.tempWeekEnding:
      type: string
      description: |-
        Date of the end of the billing cycle.
        * Format: ddMMyy
        * maxLength: 6
    enhancedSchemeData.requestName:
      type: string
      description: |-
        Name of the individual requesting temporary services.
        * maxLength: 40
    enhancedSchemeData.regularHoursWorked:
      type: string
      description: |-
        Amount of time worked during a normal operation for the task or job.
        * maxLength: 7
    enhancedSchemeData.regularHoursRate:
      type: string
      description: |-
        Amount paid per regular hours worked, minor units.
        * maxLength: 7
    AdditionalDataWallets:
      type: object
      description: ''
      properties:
        AdditionalDataWallets:
          type: object
          description: ''
          format: null
    androidpay.token:
      type: string
      description: The Android Pay token retrieved from the SDK.
    masterpass.transactionId:
      type: string
      description: The Mastercard Masterpass Transaction ID retrieved from the SDK.
    payment.token:
      type: string
      description: The Apple Pay token retrieved from the SDK.
    paywithgoogle.token:
      type: string
      description: The Google Pay token retrieved from the SDK.
    samsungpay.token:
      type: string
      description: The Samsung Pay token retrieved from the SDK.
    visacheckout.callId:
      type: string
      description: The Visa Checkout Call ID retrieved from the SDK.
    Address:
      type: object
      description: ''
      properties:
        Address:
          type: object
          description: ''
          format: null
    city:
      type: string
      description: The name of the city.
    country:
      type: string
      description: |-
        The two-character country code as defined in ISO-3166-1 alpha-2. For example, **US**.
        > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
    houseNumberOrName:
      type: string
      description: The number or name of the house.
    postalCode:
      type: string
      description: A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
    stateOrProvince:
      type: string
      description: |-
        State or province codes as defined in ISO 3166-2. For example, **SF** in US or **ON** for Canada.
        > Required for the US and Canada.
    street:
      type: string
      description: |-
        The name of the street.
        > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
    Amount:
      type: object
      description: ''
      properties:
        Amount:
          type: object
          description: ''
          format: null
    currency:
      type: string
      description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
    value:
      type: string
      description: The value can be pre-filled, if available.
    ApplicationInfo:
      type: object
      description: ''
      properties:
        ApplicationInfo:
          type: object
          description: ''
          format: null
    adyenLibrary:
      type: ''
      description: Adyen-developed software, such as libraries and plugins, used to interact with the Adyen API. For example, Magento plugin, Java API library, etc.
    adyenPaymentSource:
      type: ''
      description: Adyen-developed software to get payment details. For example, Checkout SDK, Secured Fields SDK, etc.
    externalPlatform:
      type: ''
      description: Third-party developed platform used to initiate payment requests. For example, Magento, Zuora, etc.
      properties:
        externalPlatform:
          type: object
          description: Reference
          format: null
    merchantApplication:
      type: ''
      description: Merchant developed software, such as cashier application, used to interact with the Adyen API.
    merchantDevice:
      type: ''
      description: Merchant device information.
      properties:
        merchantDevice:
          type: object
          description: Reference
          format: null
    shopperInteractionDevice:
      type: ''
      description: Shopper interaction device, such as terminal, mobile device or web browser, to initiate payment requests.
      properties:
        shopperInteractionDevice:
          type: object
          description: Reference
          format: null
    Avs:
      type: object
      description: ''
      properties:
        Avs:
          type: object
          description: ''
          format: null
    addressEditable:
      type: boolean
      description: Indicates whether the shopper is allowed to modify the billing address for the current payment request.
    enabled:
      type: string
      description: |-
        Specifies whether the shopper should enter their billing address during checkout.

        Allowed values:
        * yes — Perform AVS checks for every card payment.
        * automatic — Perform AVS checks only when required to optimize the conversion rate.
        * no — Do not perform AVS checks.
    BankAccount:
      type: object
      description: ''
      properties:
        BankAccount:
          type: object
          description: ''
          format: null
    bankAccountNumber:
      type: string
      description: The bank account number (without separators).
    bankCity:
      type: string
      description: The bank city.
    bankLocationId:
      type: string
      description: The location id of the bank. The field value is `nil` in most cases.
    bankName:
      type: string
      description: The name of the bank.
    bic:
      type: string
      description: The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.
    countryCode:
      type: string
      description: |-
        Country code where the bank is located.

        A valid value is an ISO two-character country code (e.g. 'NL').
    iban:
      type: string
      description: The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).
    ownerName:
      type: string
      description: |-
        The name of the bank account holder.
        If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:
        * χ12 is converted to ch12.
        * üA is converted to euA.
        * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.
        After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:
        * John17 - allowed.
        * J17 - allowed.
        * 171 - not allowed.
        * John-7 - allowed.
        > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.
    taxId:
      type: string
      description: The bank account holder's tax ID.
    BrowserInfo:
      type: object
      description: ''
      properties:
        BrowserInfo:
          type: object
          description: ''
          format: null
    acceptHeader:
      type: string
      description: The accept header value of the shopper's browser.
    colorDepth:
      type: integer
      description: 'The color depth of the shopper''s browser in bits per pixel. This should be obtained by using the browser''s `screen.colorDepth` property. Accepted values: 1, 4, 8, 15, 16, 24, 32 or 48 bit color depth.'
    javaEnabled:
      type: boolean
      description: Boolean value indicating if the shopper's browser is able to execute Java.
    javaScriptEnabled:
      type: boolean
      description: Boolean value indicating if the shopper's browser is able to execute JavaScript. A default 'true' value is assumed if the field is not present.
    language:
      type: string
      description: The `navigator.language` value of the shopper's browser (as defined in IETF BCP 47).
    screenHeight:
      type: integer
      description: The total height of the shopper's device screen in pixels.
    screenWidth:
      type: integer
      description: The total width of the shopper's device screen in pixels.
    timeZoneOffset:
      type: integer
      description: Time difference between UTC time and the shopper's browser local time, in minutes.
    userAgent:
      type: string
      description: The user agent value of the shopper's browser.
    Card:
      type: object
      description: ''
      properties:
        Card:
          type: object
          description: ''
          format: null
    cvc:
      type: string
      description: |-
        The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as:
        * CVV2/CVC2 – length: 3 digits
        * CID – length: 4 digits
        > If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server.
        > This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments).
        > When this value is returned in a response, it is always empty because it is not stored.
    expiryMonth:
      type: string
      description: |-
        The card expiry month.
        Format: 2 digits, zero-padded for single digits. For example:
        * 03 = March
        * 11 = November
    expiryYear:
      type: string
      description: |-
        The card expiry year.
        Format: 4 digits. For example: 2020
    holderName:
      type: string
      description: The name of the cardholder, as printed on the card.
    issueNumber:
      type: string
      description: The issue number of the card (for some UK debit cards only).
    number:
      type: string
      description: |-
        The card number (4-19 characters). Do not use any separators.
        When this value is returned in a response, only the last 4 digits of the card number are returned.
    startMonth:
      type: string
      description: The month component of the start date (for some UK debit cards only).
    startYear:
      type: string
      description: The year component of the start date (for some UK debit cards only).
    CheckoutPaymentsAction:
      type: object
      description: ''
      properties:
        CheckoutPaymentsAction:
          type: object
          description: ''
          format: null
    alternativeReference:
      type: string
      description: The voucher alternative reference code.
    data:
      type: object
      description: When the redirect URL must be accessed via POST, use this data to post to the redirect URL.
    downloadUrl:
      type: string
      description: The URL to download the voucher.
    expiresAt:
      type: string
      description: The date time of the voucher expiry.
    initialAmount:
      type: ''
      description: The initial amount.
    instructionsUrl:
      type: string
      description: The URL to the detailed instructions to make payment using the voucher.
    issuer:
      type: string
      description: The issuer of the voucher.
    maskedTelephoneNumber:
      type: string
      description: The shopper telephone number (partially masked).
    merchantName:
      type: string
      description: The merchant name.
    merchantReference:
      type: string
      description: The merchant reference.
    method:
      type: string
      description: Specifies the HTTP method, for example GET or POST.
    paymentData:
      type: string
      description: When non-empty, contains a value that you must submit to the `/payments/details` endpoint. In some cases, required for polling.
    paymentMethodType:
      type: string
      description: Specifies the payment method.
    qrCodeData:
      type: string
      description: The contents of the QR code as a UTF8 string.
    reference:
      type: string
      description: The voucher reference code.
    shopperEmail:
      type: string
      description: The shopper email.
    shopperName:
      type: object
      description: Reference
    surcharge:
      type: ''
      description: The surcharge amount.
    token:
      type: string
      description: A token to pass to the 3DS2 Component to get the fingerprint/challenge.
    totalAmount:
      type: ''
      description: The total amount (initial plus surcharge amount).
    type:
      type: string
      description: Enum that specifies the action that needs to be taken by the client.
    url:
      type: string
      description: Specifies the URL to redirect to.
    CommonField:
      type: object
      description: ''
      properties:
        CommonField:
          type: object
          description: ''
          format: null
    name:
      type: string
      description: Name of the field. For example, Name of External Platform.
    version:
      type: string
      description: Version of the field. For example, Version of External Platform.
    Company:
      type: object
      description: ''
      properties:
        Company:
          type: object
          description: ''
          format: null
    homepage:
      type: string
      description: The company website's home page.
    registrationNumber:
      type: string
      description: Registration number of the company.
    registryLocation:
      type: string
      description: Registry location of the company.
    Configuration:
      type: object
      description: ''
      properties:
        Configuration:
          type: object
          description: ''
          format: null
    avs:
      type: ''
      description: Describes the configuration for AVS ([Address Verification System](https://en.wikipedia.org/wiki/Address_Verification_System)).
    cardHolderName:
      type: string
      description: |-
        Determines whether the cardholder name should be provided or not.

        Permitted values:
        * NONE
        * OPTIONAL
        * REQUIRED
    installments:
      type: object
      description: Reference
      properties:
        installments:
          type: object
          description: Reference
          format: null
    shopperInput:
      type: ''
      description: Determines how to display the details fields.
      properties:
        shopperInput:
          type: object
          description: Reference
          format: null
    CreatePaymentLinkRequest:
      type: object
      description: ''
      properties:
        CreatePaymentLinkRequest:
          type: object
          description: ''
          format: null
    allowedPaymentMethods:
      type: array
      description: List of payments methods to be presented to the shopper. To refer to payment methods, use their `brandCode` from [Payment methods overview](https://docs.adyen.com/payment-methods).
    amount:
      type: object
      description: Reference
    billingAddress:
      type: string
      description: |-
        Specifies visibility of billing address fields.

        Permitted values:
        * editable
        * hidden
        * readOnly
    blockedPaymentMethods:
      type: array
      description: List of payments methods to be hidden from the shopper. To refer to payment methods, use their `brandCode` from [Payment methods overview](https://docs.adyen.com/payment-methods).
    deliveryAddress:
      type: string
      description: |-
        Specifies visibility of delivery address fields.

        Permitted values:
        * editable
        * hidden
        * readOnly
    description:
      type: string
      description: |-
        A short description visible on the Pay By Link page.
        Maximum length: 280 characters.
    merchantAccount:
      type: string
      description: The merchant account identifier, with which you want to process the transaction.
    returnUrl:
      type: string
      description: Merchant URL used for redirection after payment is completed
    shopperLocale:
      type: string
      description: The combination of a language code and a country code to specify the language to be used in the payment.
    shopperReference:
      type: string
      description: |-
        The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).
        > This field is required for recurring payments.
    storePaymentMethod:
      type: boolean
      description: When true and `shopperReference` is provided, the payment details will be stored.
    CreatePaymentLinkResponse:
      type: object
      description: ''
      properties:
        CreatePaymentLinkResponse:
          type: object
          description: ''
          format: null
    DetailsRequest:
      type: object
      description: ''
      properties:
        DetailsRequest:
          type: object
          description: ''
          format: null
    details:
      type: array
      description: Input details can also be provided recursively.
    threeDSAuthenticationOnly:
      type: boolean
      description: Change the `authenticationOnly` indicator originally set in the `/payments` request. Only needs to be set if you want to modify the value set previously.
    DeviceRenderOptions:
      type: object
      description: ''
      properties:
        DeviceRenderOptions:
          type: object
          description: ''
          format: null
    sdkInterface:
      type: string
      description: |-
        Supported SDK interface types.
        Allowed values:
        * Native
        * Html
        * both
    sdkUiType:
      type: array
      description: |-
        UI types supported for displaying specific challenges.
        Allowed values:
        * text
        * singleSelect
        * outOfBand
        * otherHtml
        * multiSelect
    integrator:
      type: string
      description: External platform integrator.
    ForexQuote:
      type: object
      description: ''
      properties:
        ForexQuote:
          type: object
          description: ''
          format: null
    account:
      type: string
      description: The account name.
    baseAmount:
      type: ''
      description: The base amount.
    basePoints:
      type: integer
      description: The base points.
    buy:
      type: ''
      description: The buy rate.
    interbank:
      type: ''
      description: The interbank amount.
    sell:
      type: ''
      description: The sell rate.
    signature:
      type: string
      description: The signature to validate the integrity.
    source:
      type: string
      description: The source of the forex quote.
    validTill:
      type: string
      description: The date until which the forex quote is valid.
    FraudCheckResult:
      type: object
      description: ''
      properties:
        FraudCheckResult:
          type: object
          description: ''
          format: null
    accountScore:
      type: integer
      description: The fraud score generated by the risk check.
    checkId:
      type: integer
      description: The ID of the risk check.
    FraudResult:
      type: object
      description: ''
      properties:
        FraudResult:
          type: object
          description: ''
          format: null
    results:
      type: array
      description: The result of the individual risk checks.
    InputDetail:
      type: object
      description: ''
      properties:
        InputDetail:
          type: object
          description: ''
          format: null
    inputDetails:
      type: array
      description: Input details can also be provided recursively (deprecated).
    itemSearchUrl:
      type: string
      description: In case of a select, the URL from which to query the items.
    items:
      type: array
      description: In case of a select, the items to choose from.
    key:
      type: string
      description: The value to provide in the result.
    optional:
      type: boolean
      description: True if this input value is optional.
    Item:
      type: object
      description: ''
      properties:
        Item:
          type: object
          description: ''
          format: null
    id:
      type: string
      description: The value to provide in the result.
    LineItem:
      type: object
      description: ''
      properties:
        LineItem:
          type: object
          description: ''
          format: null
    amountExcludingTax:
      type: integer
      description: Item amount excluding the tax, in minor units.
    amountIncludingTax:
      type: integer
      description: Item amount including the tax, in minor units.
    quantity:
      type: integer
      description: Number of items.
    taxAmount:
      type: integer
      description: Tax amount, in minor units.
    taxCategory:
      type: string
      description: 'Tax category: High, Low, None, Zero'
    taxPercentage:
      type: integer
      description: Tax percentage, in minor units.
    os:
      type: string
      description: Operating system running on the merchant device.
    osVersion:
      type: string
      description: Version of the operating system on the merchant device.
    MerchantRiskIndicator:
      type: object
      description: ''
      properties:
        MerchantRiskIndicator:
          type: object
          description: ''
          format: null
    addressMatch:
      type: boolean
      description: Whether the chosen delivery address is identical to the billing address.
    deliveryAddressIndicator:
      type: string
      description: |-
        Indicator regarding the delivery address.
        Allowed values:
        * `shipToBillingAddress`
        * `shipToVerifiedAddress`
        * `shipToNewAddress`
        * `shipToStore`
        * `digitalGoods`
        * `goodsNotShipped`
        * `other`
    deliveryEmail:
      type: string
      description: The delivery email address (for digital goods).
    deliveryTimeframe:
      type: string
      description: |-
        The estimated delivery time for the shopper to receive the goods.
        Allowed values:
        * `electronicDelivery`
        * `sameDayShipping`
        * `overnightShipping`
        * `twoOrMoreDaysShipping`
    giftCardAmount:
      type: ''
      description: The amount of prepaid or gift cards used for this purchase.
    giftCardCount:
      type: integer
      description: Number of individual prepaid or gift cards used for this purchase.
    preOrderDate:
      type: string
      description: For pre-order purchases, the expected date this product will be available to the shopper.
    preOrderPurchase:
      type: boolean
      description: Indicator for whether this transaction is for pre-ordering a product.
    reorderItems:
      type: boolean
      description: Indicator for whether the shopper has already purchased the same items in the past.
    Name:
      type: object
      description: ''
      properties:
        Name:
          type: object
          description: ''
          format: null
    firstName:
      type: string
      description: The first name.
    gender:
      type: string
      description: |-
        The gender.
        >The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.
    infix:
      type: string
      description: |-
        The name's infix, if applicable.
        >A maximum length of twenty (20) characters is imposed.
    lastName:
      type: string
      description: The last name.
    PaymentMethod:
      type: object
      description: ''
      properties:
        PaymentMethod:
          type: object
          description: ''
          format: null
    brands:
      type: array
      description: 'List of possible brands. For example: visa, mc.'
    group:
      type: object
      description: Reference
    paymentMethodData:
      type: string
      description: Echo data required to send in next calls.
    supportsRecurring:
      type: boolean
      description: Indicates whether this payment method supports tokenization or not.
    PaymentMethodGroup:
      type: object
      description: ''
      properties:
        PaymentMethodGroup:
          type: object
          description: ''
          format: null
    PaymentMethodsGroup:
      type: object
      description: ''
      properties:
        PaymentMethodsGroup:
          type: object
          description: ''
          format: null
    groupType:
      type: string
      description: The type to submit for any payment method in this group.
    types:
      type: array
      description: The types of payment methods that belong in this group.
    PaymentMethodsRequest:
      type: object
      description: ''
      properties:
        PaymentMethodsRequest:
          type: object
          description: ''
          format: null
    additionalData:
      type: object
      description: This field contains additional data, which may be required to return in a particular payment response. To choose data fields to be returned, go to **Customer Area** > **Account** > **API URLs**.
    channel:
      type: string
      description: |-
        The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values:
        * iOS
        * Android
        * Web
    enableRealTimeUpdate:
      type: boolean
      description: Choose if a specific transaction should use the Real-time Account Updater, regardless of other settings.
    PaymentMethodsResponse:
      type: object
      description: ''
      properties:
        PaymentMethodsResponse:
          type: object
          description: ''
          format: null
    groups:
      type: array
      description: Groups of payment methods.
    oneClickPaymentMethods:
      type: array
      description: Detailed list of one-click payment methods.
    paymentMethods:
      type: array
      description: Detailed list of payment methods required to generate payment forms.
    storedPaymentMethods:
      type: array
      description: List of all stored payment methods.
    PaymentRequest:
      type: object
      description: ''
      properties:
        PaymentRequest:
          type: object
          description: ''
          format: null
    accountInfo:
      type: ''
      description: |-
        Shopper account information for 3D Secure 2.
        > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.
    applicationInfo:
      type: object
      description: Reference
    browserInfo:
      type: ''
      description: |-
        The shopper's browser information.
        > For 3D Secure 2 transactions, `browserInfo` is required for `channel` **web** (or `deviceChannel` **browser**).
    captureDelayHours:
      type: integer
      description: The delay between the authorisation and scheduled auto-capture, specified in hours.
    company:
      type: object
      description: Reference
    dateOfBirth:
      type: string
      description: |-
        The shopper's date of birth.

        Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
    dccQuote:
      type: object
      description: Reference
    deliveryDate:
      type: string
      description: |-
        The date and time the purchased goods should be delivered.

        Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD

        Example: 2017-07-17T13:42:40.428+01:00
    deviceFingerprint:
      type: string
      description: A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
    enableOneClick:
      type: boolean
      description: When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.
    enablePayOut:
      type: boolean
      description: When true and `shopperReference` is provided, the payment details will be tokenized for payouts.
    enableRecurring:
      type: boolean
      description: When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.
    entityType:
      type: string
      description: The type of the entity the payment is processed for.
    fraudOffset:
      type: integer
      description: An integer value that is added to the normal fraud score. The value can be either positive or negative.
    lineItems:
      type: array
      description: |-
        Price and product information about the purchased items, to be included on the invoice sent to the shopper.
        > This field is required for Klarna, AfterPay, and RatePay.
    mcc:
      type: string
      description: The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
    merchantOrderReference:
      type: string
      description: |-
        This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.
        The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.
        > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
    merchantRiskIndicator:
      type: ''
      description: |-
        Additional risk fields for 3D Secure 2.
        > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.
    metadata:
      type: object
      description: |-
        Metadata consists of entries, each of which includes a key and a value.
        Limitations: Maximum 20 key-value pairs per request. When exceeding, the "177" error occurs: "Metadata size exceeds limit".
    mpiData:
      type: ''
      description: Authentication data produced by an MPI (Mastercard SecureCode or Verified By Visa).
    orderReference:
      type: string
      description: When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.
    origin:
      type: string
      description: |-
        Required for the 3D Secure 2 `channel` **Web** integration.

        Set this parameter to the origin URL of the page that you are loading the 3D Secure Component from.
    recurringExpiry:
      type: string
      description: Date after which no further authorisations shall be performed. Only for 3D Secure 2.
    recurringFrequency:
      type: string
      description: Minimum number of days between authorisations. Only for 3D Secure 2.
    recurringProcessingModel:
      type: string
      description: |
        Defines a recurring payment type.
        Allowed values:
        * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.
        * `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.
        * `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
    redirectFromIssuerMethod:
      type: string
      description: Specifies the redirect method (GET or POST) when redirecting back from the issuer.
    redirectToIssuerMethod:
      type: string
      description: Specifies the redirect method (GET or POST) when redirecting to the issuer.
    sessionValidity:
      type: string
      description: The maximum validity of the session.
    shopperIP:
      type: string
      description: |-
        The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).
        > Required for 3D Secure 2 transactions. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
    shopperInteraction:
      type: string
      description: |-
        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
        For the web service API, Adyen assumes Ecommerce shopper interaction by default.

        This field has the following possible values:
        * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
        * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
        * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
        * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
    shopperStatement:
      type: string
      description: The text to appear on the shopper's bank statement.
    socialSecurityNumber:
      type: string
      description: The shopper's social security number.
    splits:
      type: array
      description: The details of how the payment should be split when distributing a payment to a MarketPay Marketplace and its Accounts.
    telephoneNumber:
      type: string
      description: The shopper's telephone number.
    threeDS2RequestData:
      type: ''
      description: Request fields for 3D Secure 2.
      properties:
        threeDS2RequestData:
          type: object
          description: Reference
          format: null
    trustedShopper:
      type: boolean
      description: Set to true if the payment should be routed to a trusted MID.
    PaymentResponse:
      type: object
      description: ''
      properties:
        PaymentResponse:
          type: object
          description: ''
          format: null
    action:
      type: ''
      description: Action to be taken for completing the payment.
    authentication:
      type: object
      description: 'Contains `threeds2.fingerprint` or `threeds2.challengeToken` values to be used in further calls to `/payments/details` endpoint. '
    fraudResult:
      type: object
      description: Reference
    outputDetails:
      type: object
      description: Contains the details that will be presented to the shopper.
    pspReference:
      type: string
      description: |-
        Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        > `pspReference` is returned only for non-redirect payment methods.
    redirect:
      type: ''
      description: When the payment flow requires a redirect, this object contains information about the redirect URL.
      properties:
        redirect:
          type: object
          description: Reference
          format: null
    refusalReason:
      type: string
      description: |-
        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error.

        When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.
    refusalReasonCode:
      type: string
      description: Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
    resultCode:
      type: string
      description: |-
        The result of the payment. Possible values:

        * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.
        * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.
        * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.
        * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.
        * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.
        * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.
        * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. For more information on handling a pending payment, refer to [Payments with pending status](https://docs.adyen.com/development-resources/payments-with-pending-status).
        * **PresentToShopper** – Indicates that the response contains additional 
    PaymentSetupRequest:
      type: object
      description: ''
      properties:
        PaymentSetupRequest:
          type: object
          description: ''
          format: null
    configuration:
      type: ''
      description: Specify configurations to enable additional features.
    sdkVersion:
      type: string
      description: The version of the SDK you are using (for Web SDK integrations only).
    PaymentSetupResponse:
      type: object
      description: ''
      properties:
        PaymentSetupResponse:
          type: object
          description: ''
          format: null
    paymentSession:
      type: string
      description: The encoded payment session that you need to pass to the SDK.
    recurringDetails:
      type: array
      description: The detailed list of stored payment details required to generate payment forms. Will be empty if oneClick is set to false in the request.
    PaymentVerificationRequest:
      type: object
      description: ''
      properties:
        PaymentVerificationRequest:
          type: object
          description: ''
          format: null
    payload:
      type: string
      description: Encrypted and signed payment result data. You should receive this value from the Checkout SDK after the shopper completes the payment.
    PaymentVerificationResponse:
      type: object
      description: ''
      properties:
        PaymentVerificationResponse:
          type: object
          description: ''
          format: null
    paymentMethod:
      type: string
      description: The payment method used in the transaction.
    serviceError:
      type: ''
      description: The type of the error.
      properties:
        serviceError:
          type: object
          description: Reference
          format: null
    Recurring:
      type: object
      description: ''
      properties:
        Recurring:
          type: object
          description: ''
          format: null
    contract:
      type: string
      description: |-
        The type of recurring contract to be used.
        Possible values:
        * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).
        * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).
        * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.
        * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/checkout/online-payouts).
    recurringDetailName:
      type: string
      description: A descriptive name for this detail.
    tokenService:
      type: string
      description: The name of the token service.
    RecurringDetail:
      type: object
      description: ''
      properties:
        RecurringDetail:
          type: object
          description: ''
          format: null
    recurringDetailReference:
      type: string
      description: The reference that uniquely identifies the recurring detail.
    storedDetails:
      type: ''
      description: Contains information on previously stored payment details.
      properties:
        storedDetails:
          type: object
          description: Reference
          format: null
    SDKEphemPubKey:
      type: object
      description: ''
      properties:
        SDKEphemPubKey:
          type: object
          description: ''
          format: null
    crv:
      type: string
      description: The `crv` value as received from the 3D Secure 2 SDK.
    kty:
      type: string
      description: The `kty` value as received from the 3D Secure 2 SDK.
    x:
      type: string
      description: The `x` value as received from the 3D Secure 2 SDK.
    'y':
      type: string
      description: The `y` value as received from the 3D Secure 2 SDK.
    errorCode:
      type: string
      description: ''
    errorType:
      type: string
      description: ''
    message:
      type: string
      description: ''
    personalDetails:
      type: string
      description: |-
        Specifies visibility of personal details.

        Permitted values:
        * editable
        * hidden
        * readOnly
    locale:
      type: string
      description: Locale on the shopper interaction device.
    Split:
      type: object
      description: ''
      properties:
        Split:
          type: object
          description: ''
          format: null
    SplitAmount:
      type: object
      description: ''
      properties:
        SplitAmount:
          type: object
          description: ''
          format: null
    bank:
      type: ''
      description: The stored bank account.
    card:
      type: ''
      description: The stored card information.
    emailAddress:
      type: string
      description: The email associated with stored payment details.
    StoredPaymentMethod:
      type: object
      description: ''
      properties:
        StoredPaymentMethod:
          type: object
          description: ''
          format: null
    brand:
      type: string
      description: The brand of the card.
    lastFour:
      type: string
      description: The last four digits of the PAN.
    supportedShopperInteractions:
      type: array
      description: The supported shopper interactions for this stored payment method.
    SubInputDetail:
      type: object
      description: ''
      properties:
        SubInputDetail:
          type: object
          description: ''
          format: null
    acquirerBIN:
      type: string
      description: Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
    acquirerMerchantID:
      type: string
      description: Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant's acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
    authenticationOnly:
      type: boolean
      description: If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only), and not the payment authorisation.
    challengeIndicator:
      type: string
      description: |
        Possibility to specify a preference for receiving a challenge from the issuer.
        Allowed values:
        * `noPreference`
        * `requestNoChallenge`
        * `requestChallenge`
        * `requestChallengeAsMandate`
    deviceChannel:
      type: string
      description: |-
        The environment of the shopper.
        Allowed values:
        * `app`
        * `browser`
    deviceRenderOptions:
      type: ''
      description: |-
        Display options for the 3D Secure 2 SDK.
        Optional and only for `deviceChannel` **app**.
    messageVersion:
      type: string
      description: The `messageVersion` value indicating the 3D Secure 2 protocol version.
    notificationURL:
      type: string
      description: URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**.
    sdkAppID:
      type: string
      description: |-
        The `sdkAppID` value as received from the 3D Secure 2 SDK.
        Required for `deviceChannel` set to **app**.
    sdkEncData:
      type: string
      description: |-
        The `sdkEncData` value as received from the 3D Secure 2 SDK.
        Required for `deviceChannel` set to **app**.
    sdkEphemPubKey:
      type: ''
      description: |-
        The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK.
        Required for `deviceChannel` set to **app**.
    sdkMaxTimeout:
      type: integer
      description: |-
        The maximum amount of time in minutes for the 3D Secure 2 authentication process.
        Optional and only for `deviceChannel` set to **app**. Defaults to **60** minutes.
    sdkReferenceNumber:
      type: string
      description: |-
        The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK.
        Only for `deviceChannel` set to **app**.
    sdkTransID:
      type: string
      description: |-
        The `sdkTransID` value as received from the 3D Secure 2 SDK.
        Only for `deviceChannel` set to **app**.
    threeDSCompInd:
      type: string
      description: Completion indicator for the device fingerprinting.
    threeDSRequestorID:
      type: string
      description: Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.
    threeDSRequestorName:
      type: string
      description: Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure/native-3ds2/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.
    threeDSRequestorURL:
      type: string
      description: URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.
    transactionType:
      type: string
      description: Identify the type of the transaction being authenticated.
    whiteListStatus:
      type: string
      description: The `whiteListStatus` value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.
    ThreeDSecureData:
      type: object
      description: ''
      properties:
        ThreeDSecureData:
          type: object
          description: ''
          format: null
    authenticationResponse:
      type: string
      description: |-
        In 3D Secure 1, the authentication response if the shopper was redirected.

        In 3D Secure 2, this is the `transStatus` from the challenge result. If the transaction was frictionless, set this value to **Y**.
    cavv:
      type: string
      description: The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).
    cavvAlgorithm:
      type: string
      description: The CAVV algorithm used. Include this only for 3D Secure 1.
    directoryResponse:
      type: string
      description: |-
        In 3D Secure 1, this is the enrollment response from the 3D directory server.

        In 3D Secure 2, this is the `transStatus` from the `ARes`. The possible values are **A** or **Y** for a frictionless flow, or **C** for a challenge flow.
    dsTransID:
      type: string
      description: Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
    eci:
      type: string
      description: The electronic commerce indicator.
    threeDSVersion:
      type: string
      description: The version of the 3D Secure protocol.
    xid:
      type: string
      description: Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).
